Concuerror v0.17 (b40296f) started at 14 Sep 2017 14:54:11
 Options:
  [{after_timeout,infinity},
   {assertions_only,false},
   {assume_racing,false},
   {depth_bound,500},
   {disable_sleep_sets,false},
   {dpor,optimal},
   {entry_point,{replay_sanity,replay_sanity,[]}},
   {exclude_module,[]},
   {files,["/home/stavros/git/Concuerror/tests/suites/basic_tests/src/replay_sanity.erl"]},
   {ignore_error,[]},
   {instant_delivery,false},
   {interleaving_bound,infinity},
   {keep_going,true},
   {non_racing_system,[]},
   {print_depth,20},
   {quiet,true},
   {scheduling,round_robin},
   {scheduling_bound_type,none},
   {show_races,false},
   {strict_scheduling,false},
   {symbolic_names,true},
   {timeout,infinity},
   {treat_as_normal,[]},
   {use_receive_patterns,true}]
################################################################################
Interleaving #1
--------------------------------------------------------------------------------
Errors found:
* Blocked at a 'receive' ("deadlocked"; other processes have exited):
    P in replay_sanity.erl line 21
--------------------------------------------------------------------------------
Event trace:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<replay_sanity.'-replay_sanity/0-fun-0-'.0>,[]])
    in erlang.erl line 2673
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<replay_sanity.'-replay_sanity/0-fun-1-'.0>,[]])
    in erlang.erl line 2673
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<replay_sanity.'-replay_sanity/0-fun-2-'.0>,[]])
    in erlang.erl line 2673
   4: P: {ok,P} = P.1 ! {ok,P}
    in replay_sanity.erl line 18
   5: P: P.4 = erlang:spawn(erlang, apply, [#Fun<replay_sanity.'-replay_sanity/0-fun-3-'.0>,[]])
    in erlang.erl line 2673
   6: P: P.5 = erlang:spawn(erlang, apply, [#Fun<replay_sanity.'-replay_sanity/0-fun-4-'.0>,[]])
    in erlang.erl line 2673
   7: Message ({ok,P}) from P reaches P.1
   8: P.4: {p,P.2} = P.1 ! {p,P.2}
    in replay_sanity.erl line 19
   9: P.4: exits normally
  10: Message ({p,P.2}) from P.4 reaches P.1
  11: P.5: {p,P.3} = P.1 ! {p,P.3}
    in replay_sanity.erl line 20
  12: P.5: exits normally
  13: Message ({p,P.3}) from P.5 reaches P.1
  14: P.1: receives message ({p,P.2})
    in replay_sanity.erl line 12
  15: P.1: ok = P.2 ! ok
    in replay_sanity.erl line 12
  16: P.1: receives message ({p,P.3})
    in replay_sanity.erl line 13
  17: P.1: ok = P.3 ! ok
    in replay_sanity.erl line 13
  18: P.1: receives message ({ok,P})
    in replay_sanity.erl line 14
  19: P.1: exits normally
  20: Message (ok) from P.1 reaches P.2
  21: Message (ok) from P.1 reaches P.3
  22: P.2: receives message (ok)
    in replay_sanity.erl line 16
  23: P.2: exits normally
  24: P.3: receives message (ok)
    in replay_sanity.erl line 17
  25: P.3: exits normally
################################################################################
Interleaving #2
--------------------------------------------------------------------------------
Errors found:
* Blocked at a 'receive' ("deadlocked"; other processes have exited):
    P in replay_sanity.erl line 21
--------------------------------------------------------------------------------
Event trace:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<replay_sanity.'-replay_sanity/0-fun-0-'.0>,[]])
    in erlang.erl line 2673
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<replay_sanity.'-replay_sanity/0-fun-1-'.0>,[]])
    in erlang.erl line 2673
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<replay_sanity.'-replay_sanity/0-fun-2-'.0>,[]])
    in erlang.erl line 2673
   4: P: {ok,P} = P.1 ! {ok,P}
    in replay_sanity.erl line 18
   5: P: P.4 = erlang:spawn(erlang, apply, [#Fun<replay_sanity.'-replay_sanity/0-fun-3-'.0>,[]])
    in erlang.erl line 2673
   6: P: P.5 = erlang:spawn(erlang, apply, [#Fun<replay_sanity.'-replay_sanity/0-fun-4-'.0>,[]])
    in erlang.erl line 2673
   7: Message ({ok,P}) from P reaches P.1
   8: P.4: {p,P.2} = P.1 ! {p,P.2}
    in replay_sanity.erl line 19
   9: P.4: exits normally
  10: P.5: {p,P.3} = P.1 ! {p,P.3}
    in replay_sanity.erl line 20
  11: P.5: exits normally
  12: Message ({p,P.3}) from P.5 reaches P.1
  13: Message ({p,P.2}) from P.4 reaches P.1
  14: P.1: receives message ({p,P.3})
    in replay_sanity.erl line 12
  15: P.1: ok = P.3 ! ok
    in replay_sanity.erl line 12
  16: P.1: receives message ({p,P.2})
    in replay_sanity.erl line 13
  17: P.1: ok = P.2 ! ok
    in replay_sanity.erl line 13
  18: P.1: receives message ({ok,P})
    in replay_sanity.erl line 14
  19: P.1: exits normally
  20: Message (ok) from P.1 reaches P.3
  21: Message (ok) from P.1 reaches P.2
  22: P.2: receives message (ok)
    in replay_sanity.erl line 16
  23: P.2: exits normally
  24: P.3: receives message (ok)
    in replay_sanity.erl line 17
  25: P.3: exits normally
################################################################################
Exploration completed!
################################################################################
Tips:
--------------------------------------------------------------------------------
Increase '--print_depth' if output/graph contains "...".

################################################################################
Info:
--------------------------------------------------------------------------------
Instrumented & loaded module replay_sanity
Automatically instrumented module io_lib
Automatically instrumented module gen_server
Automatically instrumented module erlang
You can see pairs of racing instructions (in the report and '--graph') with '--show_races true'
Continuing after error (-k)

################################################################################
Done at 14 Sep 2017 14:54:11 (Exit status: error)
  Summary: 2 errors, 2/2 interleavings explored
