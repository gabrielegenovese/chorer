Concuerror v0.18 ('78f5262') started at 19 Oct 2017 14:24:50
 Options:
  [{after_timeout,infinity},
   {assertions_only,false},
   {assume_racing,false},
   {depth_bound,500},
   {disable_sleep_sets,false},
   {dpor,optimal},
   {entry_point,{receive_exit,test1,[]}},
   {exclude_module,[]},
   {files,["/home/stavros/git/Concuerror/tests/suites/basic_tests/src/receive_exit.erl"]},
   {ignore_error,[]},
   {instant_delivery,true},
   {interleaving_bound,infinity},
   {keep_going,true},
   {non_racing_system,[]},
   {print_depth,20},
   {quiet,true},
   {scheduling,round_robin},
   {scheduling_bound_type,none},
   {show_races,false},
   {strict_scheduling,false},
   {symbolic_names,true},
   {timeout,infinity},
   {treat_as_normal,[]},
   {use_receive_patterns,true}]
################################################################################
Interleaving #1
--------------------------------------------------------------------------------
Errors found:
* At step 10 process P.1 exited abnormally
    Reason:
      die
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<receive_exit.3.78973977>,[]])
    in erlang.erl line 2673
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<receive_exit.4.78973977>,[]])
    in erlang.erl line 2673
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<receive_exit.5.78973977>,[]])
    in erlang.erl line 2673
   4: P: exits normally
   5: P.2: foo = P.1 ! foo
    in receive_exit.erl line 36
   6: P.2: true = erlang:exit(P.1, die)
    in receive_exit.erl line 36
   7: P.2: exits normally
   8: P.3: bar = P.1 ! bar
    in receive_exit.erl line 37
   9: P.3: exits normally
  10: P.1: exits abnormally (die)
################################################################################
Interleaving #2
--------------------------------------------------------------------------------
Errors found:
* At step 12 process P.1 exited abnormally
    Reason:
      die
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<receive_exit.3.78973977>,[]])
    in erlang.erl line 2673
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<receive_exit.4.78973977>,[]])
    in erlang.erl line 2673
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<receive_exit.5.78973977>,[]])
    in erlang.erl line 2673
   4: P: exits normally
   5: P.2: foo = P.1 ! foo
    in receive_exit.erl line 36
   6: P.3: bar = P.1 ! bar
    in receive_exit.erl line 37
   7: P.3: exits normally
   8: P.1: receives message (foo)
    in receive_exit.erl line 31
   9: P.1: receives message (bar)
    in receive_exit.erl line 32
  10: P.2: true = erlang:exit(P.1, die)
    in receive_exit.erl line 36
  11: P.2: exits normally
  12: P.1: exits abnormally (die)
################################################################################
Interleaving #3
--------------------------------------------------------------------------------
Errors found:
* At step 11 process P.1 exited abnormally
    Reason:
      die
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<receive_exit.3.78973977>,[]])
    in erlang.erl line 2673
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<receive_exit.4.78973977>,[]])
    in erlang.erl line 2673
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<receive_exit.5.78973977>,[]])
    in erlang.erl line 2673
   4: P: exits normally
   5: P.2: foo = P.1 ! foo
    in receive_exit.erl line 36
   6: P.3: bar = P.1 ! bar
    in receive_exit.erl line 37
   7: P.3: exits normally
   8: P.1: receives message (foo)
    in receive_exit.erl line 31
   9: P.2: true = erlang:exit(P.1, die)
    in receive_exit.erl line 36
  10: P.2: exits normally
  11: P.1: exits abnormally (die)
################################################################################
Interleaving #4
--------------------------------------------------------------------------------
Errors found:
* At step 10 process P.1 exited abnormally
    Reason:
      die
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<receive_exit.3.78973977>,[]])
    in erlang.erl line 2673
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<receive_exit.4.78973977>,[]])
    in erlang.erl line 2673
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<receive_exit.5.78973977>,[]])
    in erlang.erl line 2673
   4: P: exits normally
   5: P.2: foo = P.1 ! foo
    in receive_exit.erl line 36
   6: P.3: bar = P.1 ! bar
    in receive_exit.erl line 37
   7: P.3: exits normally
   8: P.2: true = erlang:exit(P.1, die)
    in receive_exit.erl line 36
   9: P.2: exits normally
  10: P.1: exits abnormally (die)
################################################################################
Interleaving #5
--------------------------------------------------------------------------------
Errors found:
* At step 11 process P.1 exited abnormally
    Reason:
      die
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<receive_exit.3.78973977>,[]])
    in erlang.erl line 2673
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<receive_exit.4.78973977>,[]])
    in erlang.erl line 2673
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<receive_exit.5.78973977>,[]])
    in erlang.erl line 2673
   4: P: exits normally
   5: P.2: foo = P.1 ! foo
    in receive_exit.erl line 36
   6: P.1: receives message (foo)
    in receive_exit.erl line 31
   7: P.2: true = erlang:exit(P.1, die)
    in receive_exit.erl line 36
   8: P.2: exits normally
   9: P.3: bar = P.1 ! bar
    in receive_exit.erl line 37
  10: P.3: exits normally
  11: P.1: exits abnormally (die)
################################################################################
Exploration completed!
################################################################################
Tips:
--------------------------------------------------------------------------------
* An abnormal exit signal was sent to a process. This is probably the worst thing that can happen race-wise, as any other side-effecting operation races with the arrival of the signal. If the test produces too many interleavings consider refactoring your code.
* Increase '--print_depth' if output/graph contains "...".

################################################################################
Info:
--------------------------------------------------------------------------------
* Automatically instrumented module io_lib
* Instrumented & loaded module receive_exit
* Automatically instrumented module erlang
* You can see pairs of racing instructions (in the report and '--graph') with '--show_races true'
* Continuing after error (-k)

################################################################################
Done at 19 Oct 2017 14:24:50 (Exit status: error)
  Summary: 5 errors, 5/5 interleavings explored
