Οδηγίες εκτέλεσης:
rush_hour:solve(ML_TESTCASE_IN_A_STRING, LIST_OF_OPTIONS).
π.χ.
TestCase = "rush_hour 6 6 (5,2) [(0,(1,2),(2,2)), (1,(0,0),(1,0)), (2,(0,1),(0,3)), (3,(0,4),(0,5)), (4,(3,1),(3,3)), (5,(5,0),(5,2)), (6,(4,4),(5,4)), (7,(2,5),(4,5))];".
rush_hour:solve(TestCase, [{workers, 2}, {balancing, false}]).

Τρόπος λειτουργίας:
Για τη διάσχιση του γράφου των κινήσεων χρησιμοποιείται Breadth First Search. Η ουρά του open set διατηρείται από μία κεντρική διεργασία, τον coordinator, ενώ το closed set διατηρείται σε ένα ETS table. Ο coordinator αναθέτει καταστάσεις στους workers και αυτοί αναλαμβάνουν να παράγουν όλες τις πιθανές κινήσεις. Οι νέες καταστάσεις επιστρέφονται στον coordinator για εισαγωγή στο closed set και διανομή σε workers.

Options:
- parallel (boolean): true για χρήση της παράλληλης υλοποίησης, false για χρήση της σειριακής (default = true)
- comp_level (0..3): επίπεδο συμπίεσης των καταστάσεων πριν την εισαγωγή τους στο hashtable - 0 σημαίνει χωρίς συμπίεση, μεγαλύτερη συμπίεση ελαττώνει την κατανάλωση μνήμης αλλά αυξάνει το χρόνο επεξεργασίας (default = 1)
- comp_comm (boolean): αν είναι true, οι καταστάσεις ανταλλάσσονται μεταξύ coordinator και workers συμπιεσμένες - αυτό μειώνει τον όγκο της επικοινωνίας, αλλά εισάγει επιπλέον υπολογιστικό φόρτο στους workers (default = true)
- precheck (boolean): αν είναι true, οι workers ελέγχουν βάσει του closed set τις καταστάσεις που παράγουν πριν τις στείλουν στον coordinator - έτσι μειώνεται αρκετά ο όγκος των δεδομένων που ανταλλάσσεται μεταξύ διεργασιών, αλλά ο έλεγχος για την παρουσία στο closed set καταλήγει να εκτελείται δύο φορές για κάποιες καταστάσεις (ο coordinator κάνει τον έλεγχο αυτό πριν εισάγει καταστάσεις στο closed set) (default = true)
- solution (boolean): αν είναι true, μαζί με κάθε κατάσταση αποθηκεύεται στο closed set και η πληροφορία που χρειάζεται για το backtracking, ώστε τελικά να επιστραφεί στο χρήστη η νικητήρια σειρά κινήσεων - αυτό αυξάνει την κατανάλωση μνήμης (default = false)
- workers (1+): πόσα workers processes να δημιουργηθούν (default = 2)
- balancing (boolean): αν είναι true, ο coordinator διανέμει δυναμικά τις καταστάσεις της κάθε επανάληψης στους workers, ώστε να γίνεται καλύτερη εκμεττάλευση της παραλληλίας (load balancing) - διαφορετικά, οι καταστάσεις έχουν όλες κατανεμηθεί στατικά στην αρχή της επανάληψης, αλλά μπορεί η αποστολή των καταστάσεων της επόμενης επανάληψης να γίνεται παράλληλα με τους υπολογισμούς (default = true)
- buffer (1+): αν το load balancing είναι ενεργό, ορίζει το μήκος του buffer καταστάσεων του κάθε worker (default = 10)
- limit (1+): ορίζει ένα όριο στις επαναλήψεις που θα εκτελεστούν (default = -1 = χωρίς όριο)
