################################################################################
Concuerror started with options:
  [{'after-timeout',infinite},
   {assume_racing,false},
   {files,
       ["/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/ring_leader_election_symmetric_buffer.erl"]},
   {normal_exit,[normal]},
   {symbolic,true},
   {target,
       {ring_leader_election_symmetric_buffer,
           ring_leader_election_symmetric_buffer,[]}},
   {verbose,0},
   {wait,2000}]
################################################################################
Erroneous interleaving 1:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: Message ({get,p1}) from P reaches P.1
  10: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  11: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  12: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  13: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  17: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  18: Message (1) from P.2 reaches P.4
  19: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  20: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  21: Message ({put,1}) from P.4 reaches P.3
  22: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  23: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  24: Message ({get,p2}) from P.4 reaches P.2
  25: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  26: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  27: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  28: Message ({get,p3}) from P.4.1 reaches P.3
  29: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  30: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  31: Message (1) from P.3 reaches P.4.1
  32: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  33: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  34: Message ({put,1}) from P.4.1 reaches P.1
  35: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  36: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  37: Message (1) from P.1 reaches P
  38: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  39: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  40: Message ({put,{leader,1}}) from P reaches P.2
  41: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  42: Message ({get,p1}) from P reaches P.1
  43: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  44: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  45: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  46: Message ({leader,1}) from P.2 reaches P.4
  47: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  48: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  49: Message ({put,{leader,1}}) from P.4 reaches P.3
  50: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  51: P.4: exits normally
  52: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  53: Message ({get,p3}) from P.4.1 reaches P.3
  54: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  55: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  56: Message ({leader,1}) from P.3 reaches P.4.1
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 2:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: Message ({get,p1}) from P reaches P.1
  10: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  11: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  12: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  13: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  17: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  18: Message (1) from P.2 reaches P.4
  19: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  20: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  21: Message ({put,1}) from P.4 reaches P.3
  22: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  23: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  24: Message ({get,p2}) from P.4 reaches P.2
  25: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  26: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  27: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  28: Message ({get,p3}) from P.4.1 reaches P.3
  29: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  30: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  31: Message (1) from P.3 reaches P.4.1
  32: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  33: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  34: Message ({put,1}) from P.4.1 reaches P.1
  35: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  36: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  37: Message (1) from P.1 reaches P
  38: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  39: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  40: Message ({put,{leader,1}}) from P reaches P.2
  41: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  42: Message ({get,p1}) from P reaches P.1
  43: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  44: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  45: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  46: Message ({leader,1}) from P.2 reaches P.4
  47: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  48: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  49: P.4: exits normally
  50: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  51: Message ({get,p3}) from P.4.1 reaches P.3
  52: Message ({put,{leader,1}}) from P.4 reaches P.3
  53: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  54: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  55: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  56: Message ({leader,1}) from P.3 reaches P.4.1
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 3:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: Message ({get,p1}) from P reaches P.1
  10: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  11: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  12: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  13: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  17: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  18: Message (1) from P.2 reaches P.4
  19: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  20: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  21: Message ({put,1}) from P.4 reaches P.3
  22: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  23: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  24: Message ({get,p2}) from P.4 reaches P.2
  25: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  26: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  27: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  28: Message ({get,p3}) from P.4.1 reaches P.3
  29: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  30: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  31: Message (1) from P.3 reaches P.4.1
  32: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  33: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  34: Message ({put,1}) from P.4.1 reaches P.1
  35: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  36: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  37: Message (1) from P.1 reaches P
  38: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  39: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  40: Message ({put,{leader,1}}) from P reaches P.2
  41: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  42: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  43: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  44: Message ({leader,1}) from P.2 reaches P.4
  45: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  46: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  47: Message ({put,{leader,1}}) from P.4 reaches P.3
  48: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  49: P.4: exits normally
  50: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  51: Message ({get,p3}) from P.4.1 reaches P.3
  52: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  53: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  54: Message ({leader,1}) from P.3 reaches P.4.1
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 4:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: Message ({get,p1}) from P reaches P.1
  10: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  11: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  12: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  13: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  17: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  18: Message (1) from P.2 reaches P.4
  19: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  20: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  21: Message ({put,1}) from P.4 reaches P.3
  22: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  23: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  24: Message ({get,p2}) from P.4 reaches P.2
  25: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  26: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  27: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  28: Message ({get,p3}) from P.4.1 reaches P.3
  29: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  30: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  31: Message (1) from P.3 reaches P.4.1
  32: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  33: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  34: Message ({put,1}) from P.4.1 reaches P.1
  35: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  36: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  37: Message (1) from P.1 reaches P
  38: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  39: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  40: Message ({put,{leader,1}}) from P reaches P.2
  41: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  42: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  43: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  44: Message ({leader,1}) from P.2 reaches P.4
  45: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  46: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  47: P.4: exits normally
  48: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  49: Message ({get,p3}) from P.4.1 reaches P.3
  50: Message ({put,{leader,1}}) from P.4 reaches P.3
  51: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  52: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  53: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  54: Message ({leader,1}) from P.3 reaches P.4.1
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 5:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: Message ({get,p1}) from P reaches P.1
  10: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  11: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  12: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  13: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  17: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  18: Message (1) from P.2 reaches P.4
  19: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  20: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  21: Message ({put,1}) from P.4 reaches P.3
  22: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  23: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  24: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  25: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  26: Message ({get,p3}) from P.4.1 reaches P.3
  27: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  28: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  29: Message (1) from P.3 reaches P.4.1
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: Message ({put,1}) from P.4.1 reaches P.1
  33: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  34: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  35: Message (1) from P.1 reaches P
  36: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  37: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  38: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  39: Message ({get,p1}) from P reaches P.1
  40: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  41: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  42: Message ({put,{leader,1}}) from P reaches P.2
  43: Message ({get,p2}) from P.4 reaches P.2
  44: Message ({get,p3}) from P.4.1 reaches P.3
  45: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  46: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  47: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  48: Message ({leader,1}) from P.2 reaches P.4
  49: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  50: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  51: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  52: Message ({put,{leader,1}}) from P.4 reaches P.3
  53: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  54: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  55: Message ({leader,1}) from P.3 reaches P.4.1
  56: P.4: exits normally
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 6:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: Message ({get,p1}) from P reaches P.1
  10: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  11: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  12: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  13: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  17: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  18: Message (1) from P.2 reaches P.4
  19: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  20: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  21: Message ({put,1}) from P.4 reaches P.3
  22: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  23: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  24: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  25: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  26: Message ({get,p3}) from P.4.1 reaches P.3
  27: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  28: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  29: Message (1) from P.3 reaches P.4.1
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: Message ({put,1}) from P.4.1 reaches P.1
  33: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  34: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  35: Message (1) from P.1 reaches P
  36: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  37: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  38: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  39: Message ({get,p1}) from P reaches P.1
  40: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  41: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  42: Message ({put,{leader,1}}) from P reaches P.2
  43: Message ({get,p2}) from P.4 reaches P.2
  44: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  45: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  46: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  47: Message ({leader,1}) from P.2 reaches P.4
  48: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  49: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  50: P.4: exits normally
  51: Message ({put,{leader,1}}) from P.4 reaches P.3
  52: Message ({get,p3}) from P.4.1 reaches P.3
  53: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  54: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  55: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  56: Message ({leader,1}) from P.3 reaches P.4.1
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 7:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: Message ({get,p1}) from P reaches P.1
  10: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  11: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  12: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  13: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  17: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  18: Message (1) from P.2 reaches P.4
  19: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  20: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  21: Message ({put,1}) from P.4 reaches P.3
  22: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  23: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  24: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  25: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  26: Message ({get,p3}) from P.4.1 reaches P.3
  27: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  28: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  29: Message (1) from P.3 reaches P.4.1
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: Message ({put,1}) from P.4.1 reaches P.1
  33: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  34: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  35: Message (1) from P.1 reaches P
  36: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  37: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  38: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  39: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  40: Message ({put,{leader,1}}) from P reaches P.2
  41: Message ({get,p2}) from P.4 reaches P.2
  42: Message ({get,p3}) from P.4.1 reaches P.3
  43: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  44: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  45: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  46: Message ({leader,1}) from P.2 reaches P.4
  47: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  48: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  49: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  50: Message ({put,{leader,1}}) from P.4 reaches P.3
  51: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  52: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  53: Message ({leader,1}) from P.3 reaches P.4.1
  54: P.4: exits normally
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 8:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: Message ({get,p1}) from P reaches P.1
  10: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  11: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  12: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  13: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  17: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  18: Message (1) from P.2 reaches P.4
  19: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  20: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  21: Message ({put,1}) from P.4 reaches P.3
  22: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  23: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  24: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  25: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  26: Message ({get,p3}) from P.4.1 reaches P.3
  27: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  28: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  29: Message (1) from P.3 reaches P.4.1
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: Message ({put,1}) from P.4.1 reaches P.1
  33: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  34: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  35: Message (1) from P.1 reaches P
  36: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  37: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  38: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  39: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  40: Message ({put,{leader,1}}) from P reaches P.2
  41: Message ({get,p2}) from P.4 reaches P.2
  42: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  43: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  44: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  45: Message ({leader,1}) from P.2 reaches P.4
  46: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  47: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  48: P.4: exits normally
  49: Message ({put,{leader,1}}) from P.4 reaches P.3
  50: Message ({get,p3}) from P.4.1 reaches P.3
  51: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  52: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  53: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  54: Message ({leader,1}) from P.3 reaches P.4.1
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 9:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: Message ({get,p1}) from P reaches P.1
  10: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  11: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  12: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  13: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  17: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  18: Message (1) from P.2 reaches P.4
  19: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  20: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  21: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  22: Message ({get,p2}) from P.4 reaches P.2
  23: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  24: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  25: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  26: Message ({get,p3}) from P.4.1 reaches P.3
  27: Message ({put,1}) from P.4 reaches P.3
  28: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  29: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  30: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  31: Message (1) from P.3 reaches P.4.1
  32: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  33: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  34: Message ({put,1}) from P.4.1 reaches P.1
  35: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  36: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  37: Message (1) from P.1 reaches P
  38: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  39: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  40: Message ({put,{leader,1}}) from P reaches P.2
  41: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  42: Message ({get,p1}) from P reaches P.1
  43: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  44: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  45: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  46: Message ({leader,1}) from P.2 reaches P.4
  47: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  48: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  49: Message ({put,{leader,1}}) from P.4 reaches P.3
  50: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  51: P.4: exits normally
  52: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  53: Message ({get,p3}) from P.4.1 reaches P.3
  54: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  55: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  56: Message ({leader,1}) from P.3 reaches P.4.1
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 10:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: Message ({get,p1}) from P reaches P.1
  10: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  11: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  12: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  13: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  17: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  18: Message (1) from P.2 reaches P.4
  19: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  20: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  21: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  22: Message ({get,p2}) from P.4 reaches P.2
  23: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  24: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  25: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  26: Message ({get,p3}) from P.4.1 reaches P.3
  27: Message ({put,1}) from P.4 reaches P.3
  28: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  29: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  30: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  31: Message (1) from P.3 reaches P.4.1
  32: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  33: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  34: Message ({put,1}) from P.4.1 reaches P.1
  35: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  36: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  37: Message (1) from P.1 reaches P
  38: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  39: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  40: Message ({put,{leader,1}}) from P reaches P.2
  41: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  42: Message ({get,p1}) from P reaches P.1
  43: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  44: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  45: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  46: Message ({leader,1}) from P.2 reaches P.4
  47: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  48: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  49: P.4: exits normally
  50: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  51: Message ({get,p3}) from P.4.1 reaches P.3
  52: Message ({put,{leader,1}}) from P.4 reaches P.3
  53: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  54: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  55: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  56: Message ({leader,1}) from P.3 reaches P.4.1
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 11:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: Message ({get,p1}) from P reaches P.1
  10: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  11: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  12: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  13: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  17: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  18: Message (1) from P.2 reaches P.4
  19: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  20: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  21: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  22: Message ({get,p2}) from P.4 reaches P.2
  23: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  24: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  25: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  26: Message ({get,p3}) from P.4.1 reaches P.3
  27: Message ({put,1}) from P.4 reaches P.3
  28: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  29: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  30: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  31: Message (1) from P.3 reaches P.4.1
  32: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  33: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  34: Message ({put,1}) from P.4.1 reaches P.1
  35: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  36: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  37: Message (1) from P.1 reaches P
  38: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  39: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  40: Message ({put,{leader,1}}) from P reaches P.2
  41: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  42: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  43: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  44: Message ({leader,1}) from P.2 reaches P.4
  45: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  46: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  47: Message ({put,{leader,1}}) from P.4 reaches P.3
  48: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  49: P.4: exits normally
  50: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  51: Message ({get,p3}) from P.4.1 reaches P.3
  52: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  53: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  54: Message ({leader,1}) from P.3 reaches P.4.1
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 12:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: Message ({get,p1}) from P reaches P.1
  10: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  11: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  12: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  13: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  17: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  18: Message (1) from P.2 reaches P.4
  19: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  20: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  21: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  22: Message ({get,p2}) from P.4 reaches P.2
  23: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  24: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  25: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  26: Message ({get,p3}) from P.4.1 reaches P.3
  27: Message ({put,1}) from P.4 reaches P.3
  28: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  29: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  30: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  31: Message (1) from P.3 reaches P.4.1
  32: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  33: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  34: Message ({put,1}) from P.4.1 reaches P.1
  35: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  36: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  37: Message (1) from P.1 reaches P
  38: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  39: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  40: Message ({put,{leader,1}}) from P reaches P.2
  41: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  42: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  43: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  44: Message ({leader,1}) from P.2 reaches P.4
  45: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  46: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  47: P.4: exits normally
  48: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  49: Message ({get,p3}) from P.4.1 reaches P.3
  50: Message ({put,{leader,1}}) from P.4 reaches P.3
  51: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  52: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  53: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  54: Message ({leader,1}) from P.3 reaches P.4.1
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 13:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: Message ({get,p1}) from P reaches P.1
  10: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  11: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  12: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  13: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  17: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  18: Message (1) from P.2 reaches P.4
  19: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  20: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  21: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  22: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  23: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  24: Message ({get,p3}) from P.4.1 reaches P.3
  25: Message ({put,1}) from P.4 reaches P.3
  26: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  27: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  28: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  29: Message (1) from P.3 reaches P.4.1
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: Message ({put,1}) from P.4.1 reaches P.1
  33: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  34: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  35: Message (1) from P.1 reaches P
  36: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  37: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  38: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  39: Message ({get,p1}) from P reaches P.1
  40: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  41: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  42: Message ({put,{leader,1}}) from P reaches P.2
  43: Message ({get,p2}) from P.4 reaches P.2
  44: Message ({get,p3}) from P.4.1 reaches P.3
  45: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  46: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  47: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  48: Message ({leader,1}) from P.2 reaches P.4
  49: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  50: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  51: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  52: Message ({put,{leader,1}}) from P.4 reaches P.3
  53: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  54: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  55: Message ({leader,1}) from P.3 reaches P.4.1
  56: P.4: exits normally
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 14:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: Message ({get,p1}) from P reaches P.1
  10: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  11: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  12: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  13: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  17: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  18: Message (1) from P.2 reaches P.4
  19: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  20: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  21: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  22: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  23: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  24: Message ({get,p3}) from P.4.1 reaches P.3
  25: Message ({put,1}) from P.4 reaches P.3
  26: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  27: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  28: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  29: Message (1) from P.3 reaches P.4.1
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: Message ({put,1}) from P.4.1 reaches P.1
  33: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  34: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  35: Message (1) from P.1 reaches P
  36: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  37: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  38: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  39: Message ({get,p1}) from P reaches P.1
  40: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  41: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  42: Message ({put,{leader,1}}) from P reaches P.2
  43: Message ({get,p2}) from P.4 reaches P.2
  44: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  45: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  46: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  47: Message ({leader,1}) from P.2 reaches P.4
  48: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  49: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  50: P.4: exits normally
  51: Message ({put,{leader,1}}) from P.4 reaches P.3
  52: Message ({get,p3}) from P.4.1 reaches P.3
  53: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  54: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  55: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  56: Message ({leader,1}) from P.3 reaches P.4.1
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 15:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: Message ({get,p1}) from P reaches P.1
  10: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  11: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  12: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  13: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  17: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  18: Message (1) from P.2 reaches P.4
  19: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  20: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  21: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  22: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  23: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  24: Message ({get,p3}) from P.4.1 reaches P.3
  25: Message ({put,1}) from P.4 reaches P.3
  26: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  27: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  28: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  29: Message (1) from P.3 reaches P.4.1
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: Message ({put,1}) from P.4.1 reaches P.1
  33: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  34: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  35: Message (1) from P.1 reaches P
  36: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  37: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  38: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  39: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  40: Message ({put,{leader,1}}) from P reaches P.2
  41: Message ({get,p2}) from P.4 reaches P.2
  42: Message ({get,p3}) from P.4.1 reaches P.3
  43: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  44: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  45: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  46: Message ({leader,1}) from P.2 reaches P.4
  47: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  48: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  49: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  50: Message ({put,{leader,1}}) from P.4 reaches P.3
  51: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  52: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  53: Message ({leader,1}) from P.3 reaches P.4.1
  54: P.4: exits normally
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 16:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: Message ({get,p1}) from P reaches P.1
  10: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  11: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  12: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  13: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  17: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  18: Message (1) from P.2 reaches P.4
  19: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  20: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  21: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  22: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  23: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  24: Message ({get,p3}) from P.4.1 reaches P.3
  25: Message ({put,1}) from P.4 reaches P.3
  26: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  27: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  28: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  29: Message (1) from P.3 reaches P.4.1
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: Message ({put,1}) from P.4.1 reaches P.1
  33: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  34: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  35: Message (1) from P.1 reaches P
  36: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  37: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  38: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  39: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  40: Message ({put,{leader,1}}) from P reaches P.2
  41: Message ({get,p2}) from P.4 reaches P.2
  42: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  43: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  44: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  45: Message ({leader,1}) from P.2 reaches P.4
  46: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  47: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  48: P.4: exits normally
  49: Message ({put,{leader,1}}) from P.4 reaches P.3
  50: Message ({get,p3}) from P.4.1 reaches P.3
  51: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  52: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  53: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  54: Message ({leader,1}) from P.3 reaches P.4.1
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 17:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  15: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  16: Message (1) from P.2 reaches P.4
  17: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  18: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  19: Message ({put,1}) from P.4 reaches P.3
  20: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  21: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  22: Message ({get,p2}) from P.4 reaches P.2
  23: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  24: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  25: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  26: Message ({get,p3}) from P.4.1 reaches P.3
  27: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  28: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  29: Message (1) from P.3 reaches P.4.1
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  33: Message ({put,1}) from P.4.1 reaches P.1
  34: Message ({get,p1}) from P reaches P.1
  35: Message ({get,p3}) from P.4.1 reaches P.3
  36: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  37: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  38: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  39: Message (1) from P.1 reaches P
  40: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  41: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  42: Message ({put,{leader,1}}) from P reaches P.2
  43: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  44: Message ({get,p1}) from P reaches P.1
  45: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  46: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  47: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  48: Message ({leader,1}) from P.2 reaches P.4
  49: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  50: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  51: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  52: Message ({put,{leader,1}}) from P.4 reaches P.3
  53: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  54: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  55: Message ({leader,1}) from P.3 reaches P.4.1
  56: P.4: exits normally
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 18:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  15: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  16: Message (1) from P.2 reaches P.4
  17: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  18: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  19: Message ({put,1}) from P.4 reaches P.3
  20: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  21: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  22: Message ({get,p2}) from P.4 reaches P.2
  23: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  24: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  25: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  26: Message ({get,p3}) from P.4.1 reaches P.3
  27: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  28: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  29: Message (1) from P.3 reaches P.4.1
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  33: Message ({put,1}) from P.4.1 reaches P.1
  34: Message ({get,p1}) from P reaches P.1
  35: Message ({get,p3}) from P.4.1 reaches P.3
  36: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  37: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  38: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  39: Message (1) from P.1 reaches P
  40: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  41: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  42: Message ({put,{leader,1}}) from P reaches P.2
  43: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  44: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  45: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  46: Message ({leader,1}) from P.2 reaches P.4
  47: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  48: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  49: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  50: Message ({put,{leader,1}}) from P.4 reaches P.3
  51: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  52: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  53: Message ({leader,1}) from P.3 reaches P.4.1
  54: P.4: exits normally
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 19:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  15: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  16: Message (1) from P.2 reaches P.4
  17: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  18: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  19: Message ({put,1}) from P.4 reaches P.3
  20: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  21: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  22: Message ({get,p2}) from P.4 reaches P.2
  23: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  24: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  25: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  26: Message ({get,p3}) from P.4.1 reaches P.3
  27: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  28: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  29: Message (1) from P.3 reaches P.4.1
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  33: Message ({put,1}) from P.4.1 reaches P.1
  34: Message ({get,p1}) from P reaches P.1
  35: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  36: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  37: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  38: Message (1) from P.1 reaches P
  39: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  40: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  41: Message ({put,{leader,1}}) from P reaches P.2
  42: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  43: Message ({get,p1}) from P reaches P.1
  44: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  45: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  46: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  47: Message ({leader,1}) from P.2 reaches P.4
  48: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  49: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  50: P.4: exits normally
  51: Message ({put,{leader,1}}) from P.4 reaches P.3
  52: Message ({get,p3}) from P.4.1 reaches P.3
  53: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  54: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  55: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  56: Message ({leader,1}) from P.3 reaches P.4.1
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 20:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  15: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  16: Message (1) from P.2 reaches P.4
  17: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  18: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  19: Message ({put,1}) from P.4 reaches P.3
  20: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  21: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  22: Message ({get,p2}) from P.4 reaches P.2
  23: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  24: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  25: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  26: Message ({get,p3}) from P.4.1 reaches P.3
  27: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  28: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  29: Message (1) from P.3 reaches P.4.1
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  33: Message ({put,1}) from P.4.1 reaches P.1
  34: Message ({get,p1}) from P reaches P.1
  35: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  36: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  37: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  38: Message (1) from P.1 reaches P
  39: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  40: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  41: Message ({put,{leader,1}}) from P reaches P.2
  42: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  43: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  44: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  45: Message ({leader,1}) from P.2 reaches P.4
  46: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  47: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  48: P.4: exits normally
  49: Message ({put,{leader,1}}) from P.4 reaches P.3
  50: Message ({get,p3}) from P.4.1 reaches P.3
  51: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  52: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  53: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  54: Message ({leader,1}) from P.3 reaches P.4.1
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 21:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  15: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  16: Message (1) from P.2 reaches P.4
  17: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  18: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  19: Message ({put,1}) from P.4 reaches P.3
  20: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  21: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  22: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  23: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  24: Message ({get,p3}) from P.4.1 reaches P.3
  25: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  26: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  27: Message (1) from P.3 reaches P.4.1
  28: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  29: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  30: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  31: Message ({put,1}) from P.4.1 reaches P.1
  32: Message ({get,p1}) from P reaches P.1
  33: Message ({get,p3}) from P.4.1 reaches P.3
  34: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  35: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  36: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  37: Message (1) from P.1 reaches P
  38: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  39: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  40: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  41: Message ({get,p1}) from P reaches P.1
  42: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  43: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  44: Message ({put,{leader,1}}) from P reaches P.2
  45: Message ({get,p2}) from P.4 reaches P.2
  46: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  47: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  48: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  49: Message ({leader,1}) from P.2 reaches P.4
  50: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  51: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  52: Message ({put,{leader,1}}) from P.4 reaches P.3
  53: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  54: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  55: Message ({leader,1}) from P.3 reaches P.4.1
  56: P.4: exits normally
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 22:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  15: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  16: Message (1) from P.2 reaches P.4
  17: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  18: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  19: Message ({put,1}) from P.4 reaches P.3
  20: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  21: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  22: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  23: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  24: Message ({get,p3}) from P.4.1 reaches P.3
  25: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  26: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  27: Message (1) from P.3 reaches P.4.1
  28: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  29: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  30: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  31: Message ({put,1}) from P.4.1 reaches P.1
  32: Message ({get,p1}) from P reaches P.1
  33: Message ({get,p3}) from P.4.1 reaches P.3
  34: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  35: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  36: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  37: Message (1) from P.1 reaches P
  38: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  39: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  40: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  41: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  42: Message ({put,{leader,1}}) from P reaches P.2
  43: Message ({get,p2}) from P.4 reaches P.2
  44: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  45: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  46: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  47: Message ({leader,1}) from P.2 reaches P.4
  48: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  49: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  50: Message ({put,{leader,1}}) from P.4 reaches P.3
  51: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  52: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  53: Message ({leader,1}) from P.3 reaches P.4.1
  54: P.4: exits normally
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 23:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  15: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  16: Message (1) from P.2 reaches P.4
  17: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  18: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  19: Message ({put,1}) from P.4 reaches P.3
  20: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  21: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  22: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  23: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  24: Message ({get,p3}) from P.4.1 reaches P.3
  25: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  26: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  27: Message (1) from P.3 reaches P.4.1
  28: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  29: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  30: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  31: Message ({put,1}) from P.4.1 reaches P.1
  32: Message ({get,p1}) from P reaches P.1
  33: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  34: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  35: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  36: Message (1) from P.1 reaches P
  37: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  38: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  39: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  40: Message ({get,p1}) from P reaches P.1
  41: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  42: Message ({put,{leader,1}}) from P reaches P.2
  43: Message ({get,p2}) from P.4 reaches P.2
  44: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  45: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  46: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  47: Message ({leader,1}) from P.2 reaches P.4
  48: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  49: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  50: P.4: exits normally
  51: Message ({put,{leader,1}}) from P.4 reaches P.3
  52: Message ({get,p3}) from P.4.1 reaches P.3
  53: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  54: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  55: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  56: Message ({leader,1}) from P.3 reaches P.4.1
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 24:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  15: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  16: Message (1) from P.2 reaches P.4
  17: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  18: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  19: Message ({put,1}) from P.4 reaches P.3
  20: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  21: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  22: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  23: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  24: Message ({get,p3}) from P.4.1 reaches P.3
  25: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  26: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  27: Message (1) from P.3 reaches P.4.1
  28: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  29: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  30: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  31: Message ({put,1}) from P.4.1 reaches P.1
  32: Message ({get,p1}) from P reaches P.1
  33: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  34: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  35: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  36: Message (1) from P.1 reaches P
  37: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  38: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  39: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  40: Message ({put,{leader,1}}) from P reaches P.2
  41: Message ({get,p2}) from P.4 reaches P.2
  42: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  43: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  44: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  45: Message ({leader,1}) from P.2 reaches P.4
  46: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  47: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  48: P.4: exits normally
  49: Message ({put,{leader,1}}) from P.4 reaches P.3
  50: Message ({get,p3}) from P.4.1 reaches P.3
  51: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  52: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  53: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  54: Message ({leader,1}) from P.3 reaches P.4.1
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 25:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  15: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  16: Message (1) from P.2 reaches P.4
  17: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  18: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  19: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  20: Message ({get,p2}) from P.4 reaches P.2
  21: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  22: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  23: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  24: Message ({get,p3}) from P.4.1 reaches P.3
  25: Message ({put,1}) from P.4 reaches P.3
  26: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  27: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  28: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  29: Message (1) from P.3 reaches P.4.1
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  33: Message ({put,1}) from P.4.1 reaches P.1
  34: Message ({get,p1}) from P reaches P.1
  35: Message ({get,p3}) from P.4.1 reaches P.3
  36: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  37: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  38: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  39: Message (1) from P.1 reaches P
  40: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  41: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  42: Message ({put,{leader,1}}) from P reaches P.2
  43: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  44: Message ({get,p1}) from P reaches P.1
  45: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  46: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  47: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  48: Message ({leader,1}) from P.2 reaches P.4
  49: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  50: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  51: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  52: Message ({put,{leader,1}}) from P.4 reaches P.3
  53: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  54: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  55: Message ({leader,1}) from P.3 reaches P.4.1
  56: P.4: exits normally
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 26:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  15: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  16: Message (1) from P.2 reaches P.4
  17: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  18: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  19: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  20: Message ({get,p2}) from P.4 reaches P.2
  21: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  22: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  23: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  24: Message ({get,p3}) from P.4.1 reaches P.3
  25: Message ({put,1}) from P.4 reaches P.3
  26: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  27: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  28: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  29: Message (1) from P.3 reaches P.4.1
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  33: Message ({put,1}) from P.4.1 reaches P.1
  34: Message ({get,p1}) from P reaches P.1
  35: Message ({get,p3}) from P.4.1 reaches P.3
  36: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  37: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  38: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  39: Message (1) from P.1 reaches P
  40: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  41: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  42: Message ({put,{leader,1}}) from P reaches P.2
  43: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  44: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  45: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  46: Message ({leader,1}) from P.2 reaches P.4
  47: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  48: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  49: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  50: Message ({put,{leader,1}}) from P.4 reaches P.3
  51: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  52: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  53: Message ({leader,1}) from P.3 reaches P.4.1
  54: P.4: exits normally
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 27:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  15: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  16: Message (1) from P.2 reaches P.4
  17: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  18: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  19: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  20: Message ({get,p2}) from P.4 reaches P.2
  21: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  22: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  23: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  24: Message ({get,p3}) from P.4.1 reaches P.3
  25: Message ({put,1}) from P.4 reaches P.3
  26: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  27: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  28: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  29: Message (1) from P.3 reaches P.4.1
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  33: Message ({put,1}) from P.4.1 reaches P.1
  34: Message ({get,p1}) from P reaches P.1
  35: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  36: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  37: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  38: Message (1) from P.1 reaches P
  39: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  40: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  41: Message ({put,{leader,1}}) from P reaches P.2
  42: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  43: Message ({get,p1}) from P reaches P.1
  44: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  45: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  46: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  47: Message ({leader,1}) from P.2 reaches P.4
  48: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  49: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  50: P.4: exits normally
  51: Message ({put,{leader,1}}) from P.4 reaches P.3
  52: Message ({get,p3}) from P.4.1 reaches P.3
  53: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  54: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  55: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  56: Message ({leader,1}) from P.3 reaches P.4.1
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 28:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  15: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  16: Message (1) from P.2 reaches P.4
  17: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  18: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  19: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  20: Message ({get,p2}) from P.4 reaches P.2
  21: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  22: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  23: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  24: Message ({get,p3}) from P.4.1 reaches P.3
  25: Message ({put,1}) from P.4 reaches P.3
  26: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  27: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  28: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  29: Message (1) from P.3 reaches P.4.1
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  33: Message ({put,1}) from P.4.1 reaches P.1
  34: Message ({get,p1}) from P reaches P.1
  35: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  36: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  37: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  38: Message (1) from P.1 reaches P
  39: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  40: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  41: Message ({put,{leader,1}}) from P reaches P.2
  42: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  43: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  44: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  45: Message ({leader,1}) from P.2 reaches P.4
  46: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  47: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  48: P.4: exits normally
  49: Message ({put,{leader,1}}) from P.4 reaches P.3
  50: Message ({get,p3}) from P.4.1 reaches P.3
  51: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  52: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  53: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  54: Message ({leader,1}) from P.3 reaches P.4.1
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 29:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  15: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  16: Message (1) from P.2 reaches P.4
  17: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  18: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  19: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  20: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  21: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  22: Message ({get,p3}) from P.4.1 reaches P.3
  23: Message ({put,1}) from P.4 reaches P.3
  24: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  25: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  26: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  27: Message (1) from P.3 reaches P.4.1
  28: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  29: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  30: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  31: Message ({put,1}) from P.4.1 reaches P.1
  32: Message ({get,p1}) from P reaches P.1
  33: Message ({get,p3}) from P.4.1 reaches P.3
  34: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  35: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  36: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  37: Message (1) from P.1 reaches P
  38: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  39: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  40: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  41: Message ({get,p1}) from P reaches P.1
  42: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  43: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  44: Message ({put,{leader,1}}) from P reaches P.2
  45: Message ({get,p2}) from P.4 reaches P.2
  46: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  47: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  48: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  49: Message ({leader,1}) from P.2 reaches P.4
  50: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  51: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  52: Message ({put,{leader,1}}) from P.4 reaches P.3
  53: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  54: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  55: Message ({leader,1}) from P.3 reaches P.4.1
  56: P.4: exits normally
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 30:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  15: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  16: Message (1) from P.2 reaches P.4
  17: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  18: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  19: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  20: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  21: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  22: Message ({get,p3}) from P.4.1 reaches P.3
  23: Message ({put,1}) from P.4 reaches P.3
  24: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  25: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  26: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  27: Message (1) from P.3 reaches P.4.1
  28: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  29: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  30: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  31: Message ({put,1}) from P.4.1 reaches P.1
  32: Message ({get,p1}) from P reaches P.1
  33: Message ({get,p3}) from P.4.1 reaches P.3
  34: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  35: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  36: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  37: Message (1) from P.1 reaches P
  38: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  39: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  40: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  41: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  42: Message ({put,{leader,1}}) from P reaches P.2
  43: Message ({get,p2}) from P.4 reaches P.2
  44: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  45: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  46: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  47: Message ({leader,1}) from P.2 reaches P.4
  48: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  49: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  50: Message ({put,{leader,1}}) from P.4 reaches P.3
  51: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  52: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  53: Message ({leader,1}) from P.3 reaches P.4.1
  54: P.4: exits normally
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 31:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  15: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  16: Message (1) from P.2 reaches P.4
  17: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  18: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  19: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  20: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  21: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  22: Message ({get,p3}) from P.4.1 reaches P.3
  23: Message ({put,1}) from P.4 reaches P.3
  24: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  25: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  26: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  27: Message (1) from P.3 reaches P.4.1
  28: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  29: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  30: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  31: Message ({put,1}) from P.4.1 reaches P.1
  32: Message ({get,p1}) from P reaches P.1
  33: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  34: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  35: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  36: Message (1) from P.1 reaches P
  37: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  38: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  39: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  40: Message ({get,p1}) from P reaches P.1
  41: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  42: Message ({put,{leader,1}}) from P reaches P.2
  43: Message ({get,p2}) from P.4 reaches P.2
  44: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  45: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  46: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  47: Message ({leader,1}) from P.2 reaches P.4
  48: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  49: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  50: P.4: exits normally
  51: Message ({put,{leader,1}}) from P.4 reaches P.3
  52: Message ({get,p3}) from P.4.1 reaches P.3
  53: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  54: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  55: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  56: Message ({leader,1}) from P.3 reaches P.4.1
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 32:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: Message ({put,1}) from P reaches P.2
   8: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   9: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  15: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  16: Message (1) from P.2 reaches P.4
  17: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  18: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  19: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  20: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  21: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  22: Message ({get,p3}) from P.4.1 reaches P.3
  23: Message ({put,1}) from P.4 reaches P.3
  24: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  25: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  26: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  27: Message (1) from P.3 reaches P.4.1
  28: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  29: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  30: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  31: Message ({put,1}) from P.4.1 reaches P.1
  32: Message ({get,p1}) from P reaches P.1
  33: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  34: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  35: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  36: Message (1) from P.1 reaches P
  37: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  38: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  39: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  40: Message ({put,{leader,1}}) from P reaches P.2
  41: Message ({get,p2}) from P.4 reaches P.2
  42: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  43: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  44: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  45: Message ({leader,1}) from P.2 reaches P.4
  46: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  47: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  48: P.4: exits normally
  49: Message ({put,{leader,1}}) from P.4 reaches P.3
  50: Message ({get,p3}) from P.4.1 reaches P.3
  51: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  52: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  53: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  54: Message ({leader,1}) from P.3 reaches P.4.1
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 33:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: Message ({get,p1}) from P reaches P.1
   9: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: Message ({put,1}) from P reaches P.2
  17: Message ({get,p3}) from P.4.1 reaches P.3
  18: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  19: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  20: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  21: Message (1) from P.2 reaches P.4
  22: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  23: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  24: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  25: Message ({put,1}) from P.4 reaches P.3
  26: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  27: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  28: Message (1) from P.3 reaches P.4.1
  29: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  30: Message ({get,p2}) from P.4 reaches P.2
  31: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  32: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  33: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  34: Message ({put,1}) from P.4.1 reaches P.1
  35: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  36: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  37: Message (1) from P.1 reaches P
  38: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  39: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  40: Message ({put,{leader,1}}) from P reaches P.2
  41: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  42: Message ({get,p1}) from P reaches P.1
  43: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  44: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  45: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  46: Message ({leader,1}) from P.2 reaches P.4
  47: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  48: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  49: Message ({put,{leader,1}}) from P.4 reaches P.3
  50: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  51: P.4: exits normally
  52: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  53: Message ({get,p3}) from P.4.1 reaches P.3
  54: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  55: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  56: Message ({leader,1}) from P.3 reaches P.4.1
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 34:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: Message ({get,p1}) from P reaches P.1
   9: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: Message ({put,1}) from P reaches P.2
  17: Message ({get,p3}) from P.4.1 reaches P.3
  18: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  19: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  20: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  21: Message (1) from P.2 reaches P.4
  22: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  23: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  24: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  25: Message ({put,1}) from P.4 reaches P.3
  26: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  27: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  28: Message (1) from P.3 reaches P.4.1
  29: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  30: Message ({get,p2}) from P.4 reaches P.2
  31: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  32: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  33: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  34: Message ({put,1}) from P.4.1 reaches P.1
  35: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  36: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  37: Message (1) from P.1 reaches P
  38: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  39: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  40: Message ({put,{leader,1}}) from P reaches P.2
  41: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  42: Message ({get,p1}) from P reaches P.1
  43: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  44: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  45: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  46: Message ({leader,1}) from P.2 reaches P.4
  47: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  48: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  49: P.4: exits normally
  50: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  51: Message ({get,p3}) from P.4.1 reaches P.3
  52: Message ({put,{leader,1}}) from P.4 reaches P.3
  53: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  54: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  55: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  56: Message ({leader,1}) from P.3 reaches P.4.1
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 35:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: Message ({get,p1}) from P reaches P.1
   9: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: Message ({put,1}) from P reaches P.2
  17: Message ({get,p3}) from P.4.1 reaches P.3
  18: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  19: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  20: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  21: Message (1) from P.2 reaches P.4
  22: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  23: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  24: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  25: Message ({put,1}) from P.4 reaches P.3
  26: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  27: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  28: Message (1) from P.3 reaches P.4.1
  29: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  30: Message ({get,p2}) from P.4 reaches P.2
  31: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  32: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  33: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  34: Message ({put,1}) from P.4.1 reaches P.1
  35: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  36: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  37: Message (1) from P.1 reaches P
  38: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  39: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  40: Message ({put,{leader,1}}) from P reaches P.2
  41: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  42: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  43: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  44: Message ({leader,1}) from P.2 reaches P.4
  45: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  46: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  47: Message ({put,{leader,1}}) from P.4 reaches P.3
  48: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  49: P.4: exits normally
  50: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  51: Message ({get,p3}) from P.4.1 reaches P.3
  52: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  53: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  54: Message ({leader,1}) from P.3 reaches P.4.1
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 36:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: Message ({get,p1}) from P reaches P.1
   9: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: Message ({put,1}) from P reaches P.2
  17: Message ({get,p3}) from P.4.1 reaches P.3
  18: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  19: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  20: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  21: Message (1) from P.2 reaches P.4
  22: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  23: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  24: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  25: Message ({put,1}) from P.4 reaches P.3
  26: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  27: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  28: Message (1) from P.3 reaches P.4.1
  29: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  30: Message ({get,p2}) from P.4 reaches P.2
  31: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  32: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  33: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  34: Message ({put,1}) from P.4.1 reaches P.1
  35: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  36: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  37: Message (1) from P.1 reaches P
  38: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  39: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  40: Message ({put,{leader,1}}) from P reaches P.2
  41: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  42: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  43: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  44: Message ({leader,1}) from P.2 reaches P.4
  45: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  46: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  47: P.4: exits normally
  48: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  49: Message ({get,p3}) from P.4.1 reaches P.3
  50: Message ({put,{leader,1}}) from P.4 reaches P.3
  51: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  52: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  53: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  54: Message ({leader,1}) from P.3 reaches P.4.1
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 37:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: Message ({get,p1}) from P reaches P.1
   9: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: Message ({put,1}) from P reaches P.2
  17: Message ({get,p3}) from P.4.1 reaches P.3
  18: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  19: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  20: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  21: Message (1) from P.2 reaches P.4
  22: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  23: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  24: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  25: Message ({put,1}) from P.4 reaches P.3
  26: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  27: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  28: Message (1) from P.3 reaches P.4.1
  29: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: Message ({put,1}) from P.4.1 reaches P.1
  33: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  34: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  35: Message (1) from P.1 reaches P
  36: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  37: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  38: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  39: Message ({get,p1}) from P reaches P.1
  40: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  41: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  42: Message ({put,{leader,1}}) from P reaches P.2
  43: Message ({get,p2}) from P.4 reaches P.2
  44: Message ({get,p3}) from P.4.1 reaches P.3
  45: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  46: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  47: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  48: Message ({leader,1}) from P.2 reaches P.4
  49: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  50: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  51: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  52: Message ({put,{leader,1}}) from P.4 reaches P.3
  53: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  54: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  55: Message ({leader,1}) from P.3 reaches P.4.1
  56: P.4: exits normally
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 38:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: Message ({get,p1}) from P reaches P.1
   9: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: Message ({put,1}) from P reaches P.2
  17: Message ({get,p3}) from P.4.1 reaches P.3
  18: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  19: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  20: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  21: Message (1) from P.2 reaches P.4
  22: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  23: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  24: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  25: Message ({put,1}) from P.4 reaches P.3
  26: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  27: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  28: Message (1) from P.3 reaches P.4.1
  29: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: Message ({put,1}) from P.4.1 reaches P.1
  33: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  34: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  35: Message (1) from P.1 reaches P
  36: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  37: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  38: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  39: Message ({get,p1}) from P reaches P.1
  40: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  41: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  42: Message ({put,{leader,1}}) from P reaches P.2
  43: Message ({get,p2}) from P.4 reaches P.2
  44: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  45: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  46: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  47: Message ({leader,1}) from P.2 reaches P.4
  48: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  49: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  50: P.4: exits normally
  51: Message ({put,{leader,1}}) from P.4 reaches P.3
  52: Message ({get,p3}) from P.4.1 reaches P.3
  53: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  54: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  55: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  56: Message ({leader,1}) from P.3 reaches P.4.1
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 39:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: Message ({get,p1}) from P reaches P.1
   9: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: Message ({put,1}) from P reaches P.2
  17: Message ({get,p3}) from P.4.1 reaches P.3
  18: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  19: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  20: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  21: Message (1) from P.2 reaches P.4
  22: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  23: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  24: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  25: Message ({put,1}) from P.4 reaches P.3
  26: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  27: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  28: Message (1) from P.3 reaches P.4.1
  29: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: Message ({put,1}) from P.4.1 reaches P.1
  33: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  34: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  35: Message (1) from P.1 reaches P
  36: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  37: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  38: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  39: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  40: Message ({put,{leader,1}}) from P reaches P.2
  41: Message ({get,p2}) from P.4 reaches P.2
  42: Message ({get,p3}) from P.4.1 reaches P.3
  43: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  44: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  45: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  46: Message ({leader,1}) from P.2 reaches P.4
  47: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  48: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  49: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  50: Message ({put,{leader,1}}) from P.4 reaches P.3
  51: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  52: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  53: Message ({leader,1}) from P.3 reaches P.4.1
  54: P.4: exits normally
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 40:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: Message ({get,p1}) from P reaches P.1
   9: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: Message ({put,1}) from P reaches P.2
  17: Message ({get,p3}) from P.4.1 reaches P.3
  18: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  19: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  20: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  21: Message (1) from P.2 reaches P.4
  22: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  23: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  24: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  25: Message ({put,1}) from P.4 reaches P.3
  26: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  27: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  28: Message (1) from P.3 reaches P.4.1
  29: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: Message ({put,1}) from P.4.1 reaches P.1
  33: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  34: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  35: Message (1) from P.1 reaches P
  36: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  37: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  38: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  39: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  40: Message ({put,{leader,1}}) from P reaches P.2
  41: Message ({get,p2}) from P.4 reaches P.2
  42: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  43: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  44: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  45: Message ({leader,1}) from P.2 reaches P.4
  46: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  47: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  48: P.4: exits normally
  49: Message ({put,{leader,1}}) from P.4 reaches P.3
  50: Message ({get,p3}) from P.4.1 reaches P.3
  51: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  52: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  53: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  54: Message ({leader,1}) from P.3 reaches P.4.1
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 41:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: Message ({get,p1}) from P reaches P.1
   9: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: Message ({put,1}) from P reaches P.2
  17: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  18: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  19: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  20: Message (1) from P.2 reaches P.4
  21: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  22: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  23: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  24: Message ({get,p2}) from P.4 reaches P.2
  25: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  26: Message ({put,1}) from P.4 reaches P.3
  27: Message ({get,p3}) from P.4.1 reaches P.3
  28: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  29: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  30: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  31: Message (1) from P.3 reaches P.4.1
  32: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  33: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  34: Message ({put,1}) from P.4.1 reaches P.1
  35: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  36: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  37: Message (1) from P.1 reaches P
  38: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  39: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  40: Message ({put,{leader,1}}) from P reaches P.2
  41: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  42: Message ({get,p1}) from P reaches P.1
  43: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  44: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  45: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  46: Message ({leader,1}) from P.2 reaches P.4
  47: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  48: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  49: Message ({put,{leader,1}}) from P.4 reaches P.3
  50: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  51: P.4: exits normally
  52: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  53: Message ({get,p3}) from P.4.1 reaches P.3
  54: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  55: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  56: Message ({leader,1}) from P.3 reaches P.4.1
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 42:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: Message ({get,p1}) from P reaches P.1
   9: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: Message ({put,1}) from P reaches P.2
  17: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  18: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  19: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  20: Message (1) from P.2 reaches P.4
  21: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  22: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  23: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  24: Message ({get,p2}) from P.4 reaches P.2
  25: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  26: Message ({put,1}) from P.4 reaches P.3
  27: Message ({get,p3}) from P.4.1 reaches P.3
  28: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  29: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  30: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  31: Message (1) from P.3 reaches P.4.1
  32: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  33: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  34: Message ({put,1}) from P.4.1 reaches P.1
  35: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  36: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  37: Message (1) from P.1 reaches P
  38: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  39: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  40: Message ({put,{leader,1}}) from P reaches P.2
  41: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  42: Message ({get,p1}) from P reaches P.1
  43: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  44: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  45: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  46: Message ({leader,1}) from P.2 reaches P.4
  47: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  48: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  49: P.4: exits normally
  50: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  51: Message ({get,p3}) from P.4.1 reaches P.3
  52: Message ({put,{leader,1}}) from P.4 reaches P.3
  53: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  54: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  55: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  56: Message ({leader,1}) from P.3 reaches P.4.1
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 43:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: Message ({get,p1}) from P reaches P.1
   9: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: Message ({put,1}) from P reaches P.2
  17: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  18: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  19: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  20: Message (1) from P.2 reaches P.4
  21: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  22: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  23: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  24: Message ({get,p2}) from P.4 reaches P.2
  25: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  26: Message ({put,1}) from P.4 reaches P.3
  27: Message ({get,p3}) from P.4.1 reaches P.3
  28: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  29: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  30: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  31: Message (1) from P.3 reaches P.4.1
  32: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  33: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  34: Message ({put,1}) from P.4.1 reaches P.1
  35: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  36: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  37: Message (1) from P.1 reaches P
  38: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  39: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  40: Message ({put,{leader,1}}) from P reaches P.2
  41: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  42: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  43: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  44: Message ({leader,1}) from P.2 reaches P.4
  45: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  46: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  47: Message ({put,{leader,1}}) from P.4 reaches P.3
  48: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  49: P.4: exits normally
  50: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  51: Message ({get,p3}) from P.4.1 reaches P.3
  52: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  53: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  54: Message ({leader,1}) from P.3 reaches P.4.1
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 44:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: Message ({get,p1}) from P reaches P.1
   9: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: Message ({put,1}) from P reaches P.2
  17: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  18: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  19: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  20: Message (1) from P.2 reaches P.4
  21: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  22: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  23: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  24: Message ({get,p2}) from P.4 reaches P.2
  25: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  26: Message ({put,1}) from P.4 reaches P.3
  27: Message ({get,p3}) from P.4.1 reaches P.3
  28: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  29: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  30: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  31: Message (1) from P.3 reaches P.4.1
  32: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  33: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  34: Message ({put,1}) from P.4.1 reaches P.1
  35: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  36: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  37: Message (1) from P.1 reaches P
  38: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  39: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  40: Message ({put,{leader,1}}) from P reaches P.2
  41: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  42: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  43: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  44: Message ({leader,1}) from P.2 reaches P.4
  45: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  46: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  47: P.4: exits normally
  48: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  49: Message ({get,p3}) from P.4.1 reaches P.3
  50: Message ({put,{leader,1}}) from P.4 reaches P.3
  51: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  52: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  53: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  54: Message ({leader,1}) from P.3 reaches P.4.1
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 45:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: Message ({get,p1}) from P reaches P.1
   9: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: Message ({put,1}) from P reaches P.2
  17: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  18: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  19: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  20: Message (1) from P.2 reaches P.4
  21: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  22: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  23: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  24: Message ({put,1}) from P.4 reaches P.3
  25: Message ({get,p3}) from P.4.1 reaches P.3
  26: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  27: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  28: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  29: Message (1) from P.3 reaches P.4.1
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: Message ({put,1}) from P.4.1 reaches P.1
  33: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  34: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  35: Message (1) from P.1 reaches P
  36: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  37: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  38: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  39: Message ({get,p1}) from P reaches P.1
  40: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  41: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  42: Message ({put,{leader,1}}) from P reaches P.2
  43: Message ({get,p2}) from P.4 reaches P.2
  44: Message ({get,p3}) from P.4.1 reaches P.3
  45: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  46: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  47: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  48: Message ({leader,1}) from P.2 reaches P.4
  49: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  50: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  51: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  52: Message ({put,{leader,1}}) from P.4 reaches P.3
  53: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  54: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  55: Message ({leader,1}) from P.3 reaches P.4.1
  56: P.4: exits normally
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 46:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: Message ({get,p1}) from P reaches P.1
   9: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: Message ({put,1}) from P reaches P.2
  17: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  18: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  19: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  20: Message (1) from P.2 reaches P.4
  21: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  22: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  23: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  24: Message ({put,1}) from P.4 reaches P.3
  25: Message ({get,p3}) from P.4.1 reaches P.3
  26: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  27: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  28: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  29: Message (1) from P.3 reaches P.4.1
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: Message ({put,1}) from P.4.1 reaches P.1
  33: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  34: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  35: Message (1) from P.1 reaches P
  36: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  37: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  38: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  39: Message ({get,p1}) from P reaches P.1
  40: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  41: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  42: Message ({put,{leader,1}}) from P reaches P.2
  43: Message ({get,p2}) from P.4 reaches P.2
  44: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  45: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  46: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  47: Message ({leader,1}) from P.2 reaches P.4
  48: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  49: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  50: P.4: exits normally
  51: Message ({put,{leader,1}}) from P.4 reaches P.3
  52: Message ({get,p3}) from P.4.1 reaches P.3
  53: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  54: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  55: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  56: Message ({leader,1}) from P.3 reaches P.4.1
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 47:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: Message ({get,p1}) from P reaches P.1
   9: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: Message ({put,1}) from P reaches P.2
  17: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  18: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  19: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  20: Message (1) from P.2 reaches P.4
  21: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  22: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  23: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  24: Message ({put,1}) from P.4 reaches P.3
  25: Message ({get,p3}) from P.4.1 reaches P.3
  26: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  27: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  28: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  29: Message (1) from P.3 reaches P.4.1
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: Message ({put,1}) from P.4.1 reaches P.1
  33: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  34: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  35: Message (1) from P.1 reaches P
  36: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  37: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  38: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  39: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  40: Message ({put,{leader,1}}) from P reaches P.2
  41: Message ({get,p2}) from P.4 reaches P.2
  42: Message ({get,p3}) from P.4.1 reaches P.3
  43: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  44: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  45: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  46: Message ({leader,1}) from P.2 reaches P.4
  47: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  48: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  49: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  50: Message ({put,{leader,1}}) from P.4 reaches P.3
  51: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  52: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  53: Message ({leader,1}) from P.3 reaches P.4.1
  54: P.4: exits normally
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 48:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: Message ({get,p1}) from P reaches P.1
   9: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  10: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
  11: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  14: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  15: Message ({get,p2}) from P.4 reaches P.2
  16: Message ({put,1}) from P reaches P.2
  17: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  18: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  19: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  20: Message (1) from P.2 reaches P.4
  21: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  22: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  23: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  24: Message ({put,1}) from P.4 reaches P.3
  25: Message ({get,p3}) from P.4.1 reaches P.3
  26: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  27: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  28: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  29: Message (1) from P.3 reaches P.4.1
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: Message ({put,1}) from P.4.1 reaches P.1
  33: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  34: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  35: Message (1) from P.1 reaches P
  36: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  37: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  38: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  39: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  40: Message ({put,{leader,1}}) from P reaches P.2
  41: Message ({get,p2}) from P.4 reaches P.2
  42: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  43: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  44: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  45: Message ({leader,1}) from P.2 reaches P.4
  46: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  47: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  48: P.4: exits normally
  49: Message ({put,{leader,1}}) from P.4 reaches P.3
  50: Message ({get,p3}) from P.4.1 reaches P.3
  51: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  52: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  53: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  54: Message ({leader,1}) from P.3 reaches P.4.1
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 49:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   9: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  10: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  11: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: Message ({put,1}) from P reaches P.2
  15: Message ({get,p3}) from P.4.1 reaches P.3
  16: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  17: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  18: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  19: Message (1) from P.2 reaches P.4
  20: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  21: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  22: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  23: Message ({put,1}) from P.4 reaches P.3
  24: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  25: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  26: Message (1) from P.3 reaches P.4.1
  27: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  28: Message ({get,p2}) from P.4 reaches P.2
  29: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  33: Message ({put,1}) from P.4.1 reaches P.1
  34: Message ({get,p1}) from P reaches P.1
  35: Message ({get,p3}) from P.4.1 reaches P.3
  36: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  37: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  38: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  39: Message (1) from P.1 reaches P
  40: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  41: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  42: Message ({put,{leader,1}}) from P reaches P.2
  43: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  44: Message ({get,p1}) from P reaches P.1
  45: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  46: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  47: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  48: Message ({leader,1}) from P.2 reaches P.4
  49: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  50: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  51: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  52: Message ({put,{leader,1}}) from P.4 reaches P.3
  53: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  54: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  55: Message ({leader,1}) from P.3 reaches P.4.1
  56: P.4: exits normally
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 50:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   9: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  10: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  11: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: Message ({put,1}) from P reaches P.2
  15: Message ({get,p3}) from P.4.1 reaches P.3
  16: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  17: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  18: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  19: Message (1) from P.2 reaches P.4
  20: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  21: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  22: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  23: Message ({put,1}) from P.4 reaches P.3
  24: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  25: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  26: Message (1) from P.3 reaches P.4.1
  27: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  28: Message ({get,p2}) from P.4 reaches P.2
  29: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  33: Message ({put,1}) from P.4.1 reaches P.1
  34: Message ({get,p1}) from P reaches P.1
  35: Message ({get,p3}) from P.4.1 reaches P.3
  36: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  37: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  38: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  39: Message (1) from P.1 reaches P
  40: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  41: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  42: Message ({put,{leader,1}}) from P reaches P.2
  43: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  44: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  45: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  46: Message ({leader,1}) from P.2 reaches P.4
  47: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  48: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  49: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  50: Message ({put,{leader,1}}) from P.4 reaches P.3
  51: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  52: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  53: Message ({leader,1}) from P.3 reaches P.4.1
  54: P.4: exits normally
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 51:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   9: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  10: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  11: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: Message ({put,1}) from P reaches P.2
  15: Message ({get,p3}) from P.4.1 reaches P.3
  16: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  17: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  18: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  19: Message (1) from P.2 reaches P.4
  20: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  21: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  22: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  23: Message ({put,1}) from P.4 reaches P.3
  24: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  25: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  26: Message (1) from P.3 reaches P.4.1
  27: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  28: Message ({get,p2}) from P.4 reaches P.2
  29: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  33: Message ({put,1}) from P.4.1 reaches P.1
  34: Message ({get,p1}) from P reaches P.1
  35: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  36: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  37: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  38: Message (1) from P.1 reaches P
  39: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  40: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  41: Message ({put,{leader,1}}) from P reaches P.2
  42: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  43: Message ({get,p1}) from P reaches P.1
  44: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  45: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  46: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  47: Message ({leader,1}) from P.2 reaches P.4
  48: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  49: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  50: P.4: exits normally
  51: Message ({put,{leader,1}}) from P.4 reaches P.3
  52: Message ({get,p3}) from P.4.1 reaches P.3
  53: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  54: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  55: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  56: Message ({leader,1}) from P.3 reaches P.4.1
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 52:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   9: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  10: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  11: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: Message ({put,1}) from P reaches P.2
  15: Message ({get,p3}) from P.4.1 reaches P.3
  16: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  17: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  18: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  19: Message (1) from P.2 reaches P.4
  20: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  21: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  22: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  23: Message ({put,1}) from P.4 reaches P.3
  24: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  25: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  26: Message (1) from P.3 reaches P.4.1
  27: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  28: Message ({get,p2}) from P.4 reaches P.2
  29: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  33: Message ({put,1}) from P.4.1 reaches P.1
  34: Message ({get,p1}) from P reaches P.1
  35: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  36: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  37: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  38: Message (1) from P.1 reaches P
  39: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  40: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  41: Message ({put,{leader,1}}) from P reaches P.2
  42: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  43: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  44: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  45: Message ({leader,1}) from P.2 reaches P.4
  46: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  47: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  48: P.4: exits normally
  49: Message ({put,{leader,1}}) from P.4 reaches P.3
  50: Message ({get,p3}) from P.4.1 reaches P.3
  51: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  52: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  53: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  54: Message ({leader,1}) from P.3 reaches P.4.1
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 53:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   9: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  10: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  11: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: Message ({put,1}) from P reaches P.2
  15: Message ({get,p3}) from P.4.1 reaches P.3
  16: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  17: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  18: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  19: Message (1) from P.2 reaches P.4
  20: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  21: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  22: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  23: Message ({put,1}) from P.4 reaches P.3
  24: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  25: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  26: Message (1) from P.3 reaches P.4.1
  27: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  28: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  29: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  30: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  31: Message ({put,1}) from P.4.1 reaches P.1
  32: Message ({get,p1}) from P reaches P.1
  33: Message ({get,p3}) from P.4.1 reaches P.3
  34: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  35: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  36: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  37: Message (1) from P.1 reaches P
  38: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  39: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  40: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  41: Message ({get,p1}) from P reaches P.1
  42: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  43: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  44: Message ({put,{leader,1}}) from P reaches P.2
  45: Message ({get,p2}) from P.4 reaches P.2
  46: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  47: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  48: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  49: Message ({leader,1}) from P.2 reaches P.4
  50: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  51: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  52: Message ({put,{leader,1}}) from P.4 reaches P.3
  53: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  54: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  55: Message ({leader,1}) from P.3 reaches P.4.1
  56: P.4: exits normally
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 54:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   9: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  10: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  11: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: Message ({put,1}) from P reaches P.2
  15: Message ({get,p3}) from P.4.1 reaches P.3
  16: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  17: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  18: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  19: Message (1) from P.2 reaches P.4
  20: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  21: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  22: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  23: Message ({put,1}) from P.4 reaches P.3
  24: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  25: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  26: Message (1) from P.3 reaches P.4.1
  27: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  28: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  29: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  30: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  31: Message ({put,1}) from P.4.1 reaches P.1
  32: Message ({get,p1}) from P reaches P.1
  33: Message ({get,p3}) from P.4.1 reaches P.3
  34: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  35: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  36: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  37: Message (1) from P.1 reaches P
  38: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  39: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  40: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  41: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  42: Message ({put,{leader,1}}) from P reaches P.2
  43: Message ({get,p2}) from P.4 reaches P.2
  44: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  45: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  46: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  47: Message ({leader,1}) from P.2 reaches P.4
  48: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  49: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  50: Message ({put,{leader,1}}) from P.4 reaches P.3
  51: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  52: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  53: Message ({leader,1}) from P.3 reaches P.4.1
  54: P.4: exits normally
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 55:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   9: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  10: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  11: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: Message ({put,1}) from P reaches P.2
  15: Message ({get,p3}) from P.4.1 reaches P.3
  16: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  17: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  18: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  19: Message (1) from P.2 reaches P.4
  20: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  21: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  22: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  23: Message ({put,1}) from P.4 reaches P.3
  24: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  25: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  26: Message (1) from P.3 reaches P.4.1
  27: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  28: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  29: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  30: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  31: Message ({put,1}) from P.4.1 reaches P.1
  32: Message ({get,p1}) from P reaches P.1
  33: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  34: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  35: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  36: Message (1) from P.1 reaches P
  37: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  38: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  39: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  40: Message ({get,p1}) from P reaches P.1
  41: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  42: Message ({put,{leader,1}}) from P reaches P.2
  43: Message ({get,p2}) from P.4 reaches P.2
  44: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  45: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  46: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  47: Message ({leader,1}) from P.2 reaches P.4
  48: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  49: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  50: P.4: exits normally
  51: Message ({put,{leader,1}}) from P.4 reaches P.3
  52: Message ({get,p3}) from P.4.1 reaches P.3
  53: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  54: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  55: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  56: Message ({leader,1}) from P.3 reaches P.4.1
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 56:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   9: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  10: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  11: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: Message ({put,1}) from P reaches P.2
  15: Message ({get,p3}) from P.4.1 reaches P.3
  16: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  17: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  18: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  19: Message (1) from P.2 reaches P.4
  20: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  21: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  22: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  23: Message ({put,1}) from P.4 reaches P.3
  24: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  25: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  26: Message (1) from P.3 reaches P.4.1
  27: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  28: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  29: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  30: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  31: Message ({put,1}) from P.4.1 reaches P.1
  32: Message ({get,p1}) from P reaches P.1
  33: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  34: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  35: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  36: Message (1) from P.1 reaches P
  37: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  38: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  39: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  40: Message ({put,{leader,1}}) from P reaches P.2
  41: Message ({get,p2}) from P.4 reaches P.2
  42: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  43: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  44: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  45: Message ({leader,1}) from P.2 reaches P.4
  46: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  47: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  48: P.4: exits normally
  49: Message ({put,{leader,1}}) from P.4 reaches P.3
  50: Message ({get,p3}) from P.4.1 reaches P.3
  51: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  52: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  53: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  54: Message ({leader,1}) from P.3 reaches P.4.1
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 57:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   9: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  10: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  11: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: Message ({put,1}) from P reaches P.2
  15: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  16: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  17: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  18: Message (1) from P.2 reaches P.4
  19: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  20: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  21: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  22: Message ({get,p2}) from P.4 reaches P.2
  23: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  24: Message ({put,1}) from P.4 reaches P.3
  25: Message ({get,p3}) from P.4.1 reaches P.3
  26: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  27: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  28: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  29: Message (1) from P.3 reaches P.4.1
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  33: Message ({put,1}) from P.4.1 reaches P.1
  34: Message ({get,p1}) from P reaches P.1
  35: Message ({get,p3}) from P.4.1 reaches P.3
  36: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  37: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  38: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  39: Message (1) from P.1 reaches P
  40: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  41: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  42: Message ({put,{leader,1}}) from P reaches P.2
  43: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  44: Message ({get,p1}) from P reaches P.1
  45: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  46: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  47: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  48: Message ({leader,1}) from P.2 reaches P.4
  49: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  50: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  51: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  52: Message ({put,{leader,1}}) from P.4 reaches P.3
  53: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  54: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  55: Message ({leader,1}) from P.3 reaches P.4.1
  56: P.4: exits normally
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 58:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   9: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  10: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  11: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: Message ({put,1}) from P reaches P.2
  15: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  16: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  17: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  18: Message (1) from P.2 reaches P.4
  19: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  20: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  21: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  22: Message ({get,p2}) from P.4 reaches P.2
  23: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  24: Message ({put,1}) from P.4 reaches P.3
  25: Message ({get,p3}) from P.4.1 reaches P.3
  26: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  27: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  28: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  29: Message (1) from P.3 reaches P.4.1
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  33: Message ({put,1}) from P.4.1 reaches P.1
  34: Message ({get,p1}) from P reaches P.1
  35: Message ({get,p3}) from P.4.1 reaches P.3
  36: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  37: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  38: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  39: Message (1) from P.1 reaches P
  40: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  41: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  42: Message ({put,{leader,1}}) from P reaches P.2
  43: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  44: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  45: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  46: Message ({leader,1}) from P.2 reaches P.4
  47: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  48: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  49: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  50: Message ({put,{leader,1}}) from P.4 reaches P.3
  51: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  52: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  53: Message ({leader,1}) from P.3 reaches P.4.1
  54: P.4: exits normally
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 59:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   9: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  10: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  11: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: Message ({put,1}) from P reaches P.2
  15: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  16: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  17: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  18: Message (1) from P.2 reaches P.4
  19: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  20: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  21: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  22: Message ({get,p2}) from P.4 reaches P.2
  23: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  24: Message ({put,1}) from P.4 reaches P.3
  25: Message ({get,p3}) from P.4.1 reaches P.3
  26: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  27: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  28: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  29: Message (1) from P.3 reaches P.4.1
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  33: Message ({put,1}) from P.4.1 reaches P.1
  34: Message ({get,p1}) from P reaches P.1
  35: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  36: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  37: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  38: Message (1) from P.1 reaches P
  39: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  40: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  41: Message ({put,{leader,1}}) from P reaches P.2
  42: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  43: Message ({get,p1}) from P reaches P.1
  44: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  45: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  46: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  47: Message ({leader,1}) from P.2 reaches P.4
  48: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  49: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  50: P.4: exits normally
  51: Message ({put,{leader,1}}) from P.4 reaches P.3
  52: Message ({get,p3}) from P.4.1 reaches P.3
  53: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  54: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  55: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  56: Message ({leader,1}) from P.3 reaches P.4.1
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 60:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   9: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  10: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  11: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: Message ({put,1}) from P reaches P.2
  15: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  16: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  17: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  18: Message (1) from P.2 reaches P.4
  19: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  20: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  21: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  22: Message ({get,p2}) from P.4 reaches P.2
  23: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  24: Message ({put,1}) from P.4 reaches P.3
  25: Message ({get,p3}) from P.4.1 reaches P.3
  26: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  27: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  28: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  29: Message (1) from P.3 reaches P.4.1
  30: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  31: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  32: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  33: Message ({put,1}) from P.4.1 reaches P.1
  34: Message ({get,p1}) from P reaches P.1
  35: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  36: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  37: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  38: Message (1) from P.1 reaches P
  39: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  40: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  41: Message ({put,{leader,1}}) from P reaches P.2
  42: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  43: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  44: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  45: Message ({leader,1}) from P.2 reaches P.4
  46: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  47: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  48: P.4: exits normally
  49: Message ({put,{leader,1}}) from P.4 reaches P.3
  50: Message ({get,p3}) from P.4.1 reaches P.3
  51: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  52: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  53: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  54: Message ({leader,1}) from P.3 reaches P.4.1
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 61:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   9: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  10: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  11: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: Message ({put,1}) from P reaches P.2
  15: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  16: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  17: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  18: Message (1) from P.2 reaches P.4
  19: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  20: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  21: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  22: Message ({put,1}) from P.4 reaches P.3
  23: Message ({get,p3}) from P.4.1 reaches P.3
  24: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  25: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  26: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  27: Message (1) from P.3 reaches P.4.1
  28: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  29: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  30: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  31: Message ({put,1}) from P.4.1 reaches P.1
  32: Message ({get,p1}) from P reaches P.1
  33: Message ({get,p3}) from P.4.1 reaches P.3
  34: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  35: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  36: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  37: Message (1) from P.1 reaches P
  38: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  39: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  40: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  41: Message ({get,p1}) from P reaches P.1
  42: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  43: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  44: Message ({put,{leader,1}}) from P reaches P.2
  45: Message ({get,p2}) from P.4 reaches P.2
  46: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  47: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  48: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  49: Message ({leader,1}) from P.2 reaches P.4
  50: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  51: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  52: Message ({put,{leader,1}}) from P.4 reaches P.3
  53: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  54: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  55: Message ({leader,1}) from P.3 reaches P.4.1
  56: P.4: exits normally
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 62:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   9: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  10: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  11: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: Message ({put,1}) from P reaches P.2
  15: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  16: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  17: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  18: Message (1) from P.2 reaches P.4
  19: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  20: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  21: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  22: Message ({put,1}) from P.4 reaches P.3
  23: Message ({get,p3}) from P.4.1 reaches P.3
  24: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  25: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  26: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  27: Message (1) from P.3 reaches P.4.1
  28: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  29: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  30: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  31: Message ({put,1}) from P.4.1 reaches P.1
  32: Message ({get,p1}) from P reaches P.1
  33: Message ({get,p3}) from P.4.1 reaches P.3
  34: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  35: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  36: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  37: Message (1) from P.1 reaches P
  38: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  39: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  40: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  41: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 61
  42: Message ({put,{leader,1}}) from P reaches P.2
  43: Message ({get,p2}) from P.4 reaches P.2
  44: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  45: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  46: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  47: Message ({leader,1}) from P.2 reaches P.4
  48: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  49: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  50: Message ({put,{leader,1}}) from P.4 reaches P.3
  51: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  52: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  53: Message ({leader,1}) from P.3 reaches P.4.1
  54: P.4: exits normally
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Erroneous interleaving 63:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   9: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  10: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  11: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: Message ({put,1}) from P reaches P.2
  15: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  16: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  17: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  18: Message (1) from P.2 reaches P.4
  19: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  20: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  21: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  22: Message ({put,1}) from P.4 reaches P.3
  23: Message ({get,p3}) from P.4.1 reaches P.3
  24: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  25: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  26: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  27: Message (1) from P.3 reaches P.4.1
  28: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  29: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  30: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  31: Message ({put,1}) from P.4.1 reaches P.1
  32: Message ({get,p1}) from P reaches P.1
  33: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  34: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  35: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  36: Message (1) from P.1 reaches P
  37: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  38: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  39: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  40: Message ({get,p1}) from P reaches P.1
  41: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 61
  42: Message ({put,{leader,1}}) from P reaches P.2
  43: Message ({get,p2}) from P.4 reaches P.2
  44: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  45: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  46: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  47: Message ({leader,1}) from P.2 reaches P.4
  48: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  49: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  50: P.4: exits normally
  51: Message ({put,{leader,1}}) from P.4 reaches P.3
  52: Message ({get,p3}) from P.4.1 reaches P.3
  53: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  54: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  55: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  56: Message ({leader,1}) from P.3 reaches P.4.1
  57: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  58: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  59: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  62: Message ({leader,1}) from P.1 reaches P
  63: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  64: P: exits normally
  65: P.4.1: exits normally
################################################################################
Erroneous interleaving 64:
* Blocked at a 'receive' (when all other processes have exited):
    P.1 in ring_leader_election_symmetric_buffer.erl line 61
    P.2 in ring_leader_election_symmetric_buffer.erl line 61
    P.3 in ring_leader_election_symmetric_buffer.erl line 61
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.4.37322002>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   5: P: true = erlang:register(p1, P)
    in ring_leader_election_symmetric_buffer.erl line 23
   6: P: {put,1} = P.2 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
   7: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
   8: P.4: P.4.1 = erlang:spawn(erlang, apply, [#Fun<ring_leader_election_symmetric_buffer.0.37322002>,[]])
    in erlang.erl line 2329
   9: P.4: true = erlang:register(p2, P.4)
    in ring_leader_election_symmetric_buffer.erl line 23
  10: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  11: P.4.1: true = erlang:register(p3, P.4.1)
    in ring_leader_election_symmetric_buffer.erl line 23
  12: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  13: Message ({get,p2}) from P.4 reaches P.2
  14: Message ({put,1}) from P reaches P.2
  15: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 61
  16: P.2: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  17: P.2: 1 = p2 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  18: Message (1) from P.2 reaches P.4
  19: P.4: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  20: P.4: {put,1} = P.3 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  21: P.4: {get,p2} = P.2 ! {get,p2}
    in ring_leader_election_symmetric_buffer.erl line 89
  22: Message ({put,1}) from P.4 reaches P.3
  23: Message ({get,p3}) from P.4.1 reaches P.3
  24: P.3: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  25: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  26: P.3: 1 = p3 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  27: Message (1) from P.3 reaches P.4.1
  28: P.4.1: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  29: P.4.1: {put,1} = P.1 ! {put,1}
    in ring_leader_election_symmetric_buffer.erl line 86
  30: P.4.1: {get,p3} = P.3 ! {get,p3}
    in ring_leader_election_symmetric_buffer.erl line 89
  31: Message ({put,1}) from P.4.1 reaches P.1
  32: Message ({get,p1}) from P reaches P.1
  33: P.1: receives message ({put,1})
    in ring_leader_election_symmetric_buffer.erl line 61
  34: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  35: P.1: 1 = p1 ! 1
    in ring_leader_election_symmetric_buffer.erl line 73
  36: Message (1) from P.1 reaches P
  37: P: receives message (1)
    in ring_leader_election_symmetric_buffer.erl line 90
  38: P: {put,{leader,1}} = P.2 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  39: P: {get,p1} = P.1 ! {get,p1}
    in ring_leader_election_symmetric_buffer.erl line 89
  40: Message ({put,{leader,1}}) from P reaches P.2
  41: Message ({get,p2}) from P.4 reaches P.2
  42: P.2: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  43: P.2: receives message ({get,p2})
    in ring_leader_election_symmetric_buffer.erl line 76
  44: P.2: {leader,1} = p2 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  45: Message ({leader,1}) from P.2 reaches P.4
  46: P.4: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  47: P.4: {put,{leader,1}} = P.3 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  48: P.4: exits normally
  49: Message ({put,{leader,1}}) from P.4 reaches P.3
  50: Message ({get,p3}) from P.4.1 reaches P.3
  51: P.3: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  52: P.3: receives message ({get,p3})
    in ring_leader_election_symmetric_buffer.erl line 76
  53: P.3: {leader,1} = p3 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  54: Message ({leader,1}) from P.3 reaches P.4.1
  55: P.4.1: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  56: P.4.1: {put,{leader,1}} = P.1 ! {put,{leader,1}}
    in ring_leader_election_symmetric_buffer.erl line 86
  57: P.4.1: exits normally
  58: Message ({put,{leader,1}}) from P.4.1 reaches P.1
  59: Message ({get,p1}) from P reaches P.1
  60: P.1: receives message ({put,{leader,1}})
    in ring_leader_election_symmetric_buffer.erl line 61
  61: P.1: receives message ({get,p1})
    in ring_leader_election_symmetric_buffer.erl line 76
  62: P.1: {leader,1} = p1 ! {leader,1}
    in ring_leader_election_symmetric_buffer.erl line 73
  63: Message ({leader,1}) from P.1 reaches P
  64: P: receives message ({leader,1})
    in ring_leader_election_symmetric_buffer.erl line 90
  65: P: exits normally
################################################################################
Done! (Exit status: completed)
  Summary: 64 errors, 64/64 interleavings explored
