Concuerror v0.17 ('47c15d4') started at 15 Sep 2017 13:29:33
 Options:
  [{after_timeout,infinity},
   {assertions_only,false},
   {assume_racing,false},
   {depth_bound,500},
   {disable_sleep_sets,false},
   {dpor,optimal},
   {entry_point,{preemption,preemption,[]}},
   {exclude_module,[]},
   {files,["/home/stavros/git/Concuerror/tests/suites/advanced_tests/src/preemption.erl"]},
   {ignore_error,[]},
   {instant_delivery,false},
   {interleaving_bound,infinity},
   {keep_going,true},
   {non_racing_system,[]},
   {print_depth,20},
   {quiet,true},
   {scheduling,oldest},
   {scheduling_bound_type,none},
   {show_races,false},
   {strict_scheduling,false},
   {symbolic_names,true},
   {timeout,infinity},
   {treat_as_normal,[]},
   {use_receive_patterns,true}]
################################################################################
Interleaving #1
--------------------------------------------------------------------------------
Errors found:
* Blocked at a 'receive' ("deadlocked"; other processes have exited):
    P in preemption.erl line 19
--------------------------------------------------------------------------------
Event trace:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<preemption.'-spawn_receivers/2-fun-1-'.0>,[]])
    in erlang.erl line 2673
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<preemption.'-spawn_receivers/2-fun-1-'.0>,[]])
    in erlang.erl line 2673
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<preemption.'-spawn_senders/3-fun-1-'.0>,[]])
    in erlang.erl line 2673
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<preemption.'-spawn_senders/3-fun-1-'.0>,[]])
    in erlang.erl line 2673
   5: P.3: 0 = P.1 ! 0
    in preemption.erl line 43
   6: P.3: 0 = P.2 ! 0
    in preemption.erl line 43
   7: P.3: {sender,P.3} = P ! {sender,P.3}
    in preemption.erl line 44
   8: P.3: exits normally
   9: Message (0) from P.3 reaches P.1
  10: Message (0) from P.3 reaches P.2
  11: Message ({sender,P.3}) from P.3 reaches P
  12: P: receives message ({sender,P.3})
    in preemption.erl line 48
  13: P.4: 1 = P.1 ! 1
    in preemption.erl line 43
  14: P.4: 1 = P.2 ! 1
    in preemption.erl line 43
  15: P.4: {sender,P.4} = P ! {sender,P.4}
    in preemption.erl line 44
  16: P.4: exits normally
  17: Message (1) from P.4 reaches P.1
  18: Message (1) from P.4 reaches P.2
  19: Message ({sender,P.4}) from P.4 reaches P
  20: P: receives message ({sender,P.4})
    in preemption.erl line 48
  21: P: go = P.1 ! go
    in preemption.erl line 54
  22: P: go = P.2 ! go
    in preemption.erl line 54
  23: Message (go) from P reaches P.1
  24: Message (go) from P reaches P.2
  25: P.1: receives message (go)
    in preemption.erl line 27
  26: P.1: receives message (0)
    in preemption.erl line 34
  27: P.1: receives message (1)
    in preemption.erl line 34
  28: P.1: exits normally
  29: P.2: receives message (go)
    in preemption.erl line 27
  30: P.2: receives message (0)
    in preemption.erl line 34
  31: P.2: receives message (1)
    in preemption.erl line 34
  32: P.2: exits normally
################################################################################
Interleaving #2
--------------------------------------------------------------------------------
Errors found:
* Blocked at a 'receive' ("deadlocked"; other processes have exited):
    P in preemption.erl line 19
--------------------------------------------------------------------------------
Event trace:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<preemption.'-spawn_receivers/2-fun-1-'.0>,[]])
    in erlang.erl line 2673
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<preemption.'-spawn_receivers/2-fun-1-'.0>,[]])
    in erlang.erl line 2673
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<preemption.'-spawn_senders/3-fun-1-'.0>,[]])
    in erlang.erl line 2673
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<preemption.'-spawn_senders/3-fun-1-'.0>,[]])
    in erlang.erl line 2673
   5: P.3: 0 = P.1 ! 0
    in preemption.erl line 43
   6: P.3: 0 = P.2 ! 0
    in preemption.erl line 43
   7: P.3: {sender,P.3} = P ! {sender,P.3}
    in preemption.erl line 44
   8: P.3: exits normally
   9: Message (0) from P.3 reaches P.1
  10: Message ({sender,P.3}) from P.3 reaches P
  11: P: receives message ({sender,P.3})
    in preemption.erl line 48
  12: P.4: 1 = P.1 ! 1
    in preemption.erl line 43
  13: P.4: 1 = P.2 ! 1
    in preemption.erl line 43
  14: P.4: {sender,P.4} = P ! {sender,P.4}
    in preemption.erl line 44
  15: P.4: exits normally
  16: Message (1) from P.4 reaches P.1
  17: Message ({sender,P.4}) from P.4 reaches P
  18: P: receives message ({sender,P.4})
    in preemption.erl line 48
  19: P: go = P.1 ! go
    in preemption.erl line 54
  20: P: go = P.2 ! go
    in preemption.erl line 54
  21: Message (go) from P reaches P.1
  22: Message (go) from P reaches P.2
  23: P.1: receives message (go)
    in preemption.erl line 27
  24: P.1: receives message (0)
    in preemption.erl line 34
  25: P.1: receives message (1)
    in preemption.erl line 34
  26: P.1: exits normally
  27: P.2: receives message (go)
    in preemption.erl line 27
  28: Message (1) from P.4 reaches P.2
  29: Message (0) from P.3 reaches P.2
  30: P.2: receives message (1)
    in preemption.erl line 34
  31: P.2: receives message (0)
    in preemption.erl line 34
  32: P.2: exits normally
################################################################################
Interleaving #3
--------------------------------------------------------------------------------
Errors found:
* Blocked at a 'receive' ("deadlocked"; other processes have exited):
    P in preemption.erl line 19
--------------------------------------------------------------------------------
Event trace:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<preemption.'-spawn_receivers/2-fun-1-'.0>,[]])
    in erlang.erl line 2673
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<preemption.'-spawn_receivers/2-fun-1-'.0>,[]])
    in erlang.erl line 2673
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<preemption.'-spawn_senders/3-fun-1-'.0>,[]])
    in erlang.erl line 2673
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<preemption.'-spawn_senders/3-fun-1-'.0>,[]])
    in erlang.erl line 2673
   5: P.3: 0 = P.1 ! 0
    in preemption.erl line 43
   6: P.3: 0 = P.2 ! 0
    in preemption.erl line 43
   7: P.3: {sender,P.3} = P ! {sender,P.3}
    in preemption.erl line 44
   8: P.3: exits normally
   9: Message (0) from P.3 reaches P.2
  10: Message ({sender,P.3}) from P.3 reaches P
  11: P: receives message ({sender,P.3})
    in preemption.erl line 48
  12: P.4: 1 = P.1 ! 1
    in preemption.erl line 43
  13: P.4: 1 = P.2 ! 1
    in preemption.erl line 43
  14: P.4: {sender,P.4} = P ! {sender,P.4}
    in preemption.erl line 44
  15: P.4: exits normally
  16: Message (1) from P.4 reaches P.2
  17: Message ({sender,P.4}) from P.4 reaches P
  18: P: receives message ({sender,P.4})
    in preemption.erl line 48
  19: P: go = P.1 ! go
    in preemption.erl line 54
  20: P: go = P.2 ! go
    in preemption.erl line 54
  21: Message (go) from P reaches P.1
  22: Message (go) from P reaches P.2
  23: P.1: receives message (go)
    in preemption.erl line 27
  24: P.2: receives message (go)
    in preemption.erl line 27
  25: P.2: receives message (0)
    in preemption.erl line 34
  26: P.2: receives message (1)
    in preemption.erl line 34
  27: P.2: exits normally
  28: Message (1) from P.4 reaches P.1
  29: Message (0) from P.3 reaches P.1
  30: P.1: receives message (1)
    in preemption.erl line 34
  31: P.1: receives message (0)
    in preemption.erl line 34
  32: P.1: exits normally
################################################################################
Interleaving #4
--------------------------------------------------------------------------------
Errors found:
* Blocked at a 'receive' ("deadlocked"; other processes have exited):
    P in preemption.erl line 19
--------------------------------------------------------------------------------
Event trace:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<preemption.'-spawn_receivers/2-fun-1-'.0>,[]])
    in erlang.erl line 2673
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<preemption.'-spawn_receivers/2-fun-1-'.0>,[]])
    in erlang.erl line 2673
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<preemption.'-spawn_senders/3-fun-1-'.0>,[]])
    in erlang.erl line 2673
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<preemption.'-spawn_senders/3-fun-1-'.0>,[]])
    in erlang.erl line 2673
   5: P.3: 0 = P.1 ! 0
    in preemption.erl line 43
   6: P.3: 0 = P.2 ! 0
    in preemption.erl line 43
   7: P.3: {sender,P.3} = P ! {sender,P.3}
    in preemption.erl line 44
   8: P.3: exits normally
   9: Message ({sender,P.3}) from P.3 reaches P
  10: P: receives message ({sender,P.3})
    in preemption.erl line 48
  11: P.4: 1 = P.1 ! 1
    in preemption.erl line 43
  12: P.4: 1 = P.2 ! 1
    in preemption.erl line 43
  13: P.4: {sender,P.4} = P ! {sender,P.4}
    in preemption.erl line 44
  14: P.4: exits normally
  15: Message ({sender,P.4}) from P.4 reaches P
  16: P: receives message ({sender,P.4})
    in preemption.erl line 48
  17: P: go = P.1 ! go
    in preemption.erl line 54
  18: P: go = P.2 ! go
    in preemption.erl line 54
  19: Message (go) from P reaches P.1
  20: Message (go) from P reaches P.2
  21: P.1: receives message (go)
    in preemption.erl line 27
  22: P.2: receives message (go)
    in preemption.erl line 27
  23: Message (1) from P.4 reaches P.2
  24: Message (0) from P.3 reaches P.2
  25: P.2: receives message (1)
    in preemption.erl line 34
  26: P.2: receives message (0)
    in preemption.erl line 34
  27: P.2: exits normally
  28: Message (1) from P.4 reaches P.1
  29: Message (0) from P.3 reaches P.1
  30: P.1: receives message (1)
    in preemption.erl line 34
  31: P.1: receives message (0)
    in preemption.erl line 34
  32: P.1: exits normally
################################################################################
Exploration completed!
################################################################################
Tips:
--------------------------------------------------------------------------------
Increase '--print_depth' if output/graph contains "...".

################################################################################
Info:
--------------------------------------------------------------------------------
Instrumented & loaded module preemption
Automatically instrumented module io_lib
Automatically instrumented module lists
Automatically instrumented module erlang
You can see pairs of racing instructions (in the report and '--graph') with '--show_races true'
Continuing after error (-k)

################################################################################
Done at 15 Sep 2017 13:29:34 (Exit status: error)
  Summary: 4 errors, 4/4 interleavings explored
