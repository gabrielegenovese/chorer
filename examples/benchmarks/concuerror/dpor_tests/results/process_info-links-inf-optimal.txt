Concuerror v0.20.0+build.2144.ref3e33842 started at 17 Jul 2018 21:16:41
 Options:
  [{after_timeout,infinity},
   {assertions_only,false},
   {assume_racing,false},
   {depth_bound,500},
   {disable_sleep_sets,false},
   {dpor,optimal},
   {entry_point,{process_info,links,[]}},
   {exclude_module,[]},
   {files,["/Users/stavros.aronis/git/Concuerror/tests/suites/dpor_tests/src/process_info.erl"]},
   {first_process_errors_only,false},
   {ignore_error,[]},
   {instant_delivery,true},
   {interleaving_bound,infinity},
   {keep_going,true},
   {non_racing_system,[]},
   {print_depth,20},
   {quiet,true},
   {scheduling,round_robin},
   {scheduling_bound_type,none},
   {show_races,false},
   {strict_scheduling,false},
   {symbolic_names,true},
   {timeout,5000},
   {treat_as_normal,[]},
   {use_receive_patterns,true}]
################################################################################
Interleaving #1
--------------------------------------------------------------------------------
Errors found:
* Blocked at a 'receive' ("deadlocked"; other processes have exited):
    <P/name> in process_info.erl line 18
     Mailbox contents: []
--------------------------------------------------------------------------------
Event trace:
   1: <P/name>: <P.1> = erlang:spawn(erlang, apply, [#Fun<process_info.0.62237898>,[]])
    in erlang.erl line 2687
   2: <P/name>: <P.2> = erlang:spawn(erlang, apply, [#Fun<process_info.1.62237898>,[]])
    in erlang.erl line 2687
   3: <P.1>: undefined = erlang:whereis(name)
    in process_info.erl line 11
   4: <P.1>: true = erlang:link(<P/name>)
    in process_info.erl line 11
   5: <P.1>: exits normally
   6: <P.1>: true = erlang:exit(<P/name>, normal)
    (while exiting)
   7: <P.2>: foo = <P/name> ! foo
    in process_info.erl line 12
   8: <P.2>: true = erlang:link(<P/name>)
    in process_info.erl line 12
   9: <P.2>: exits normally
  10: <P.2>: true = erlang:exit(<P/name>, normal)
    (while exiting)
  11: <P/name>: receives message (foo)
    in process_info.erl line 15
  12: <P/name>: {links,[<P.1>,<P.2>]} = erlang:process_info(<P/name>, links)
    in process_info.erl line 16
  13: <P/name>: true = erlang:register(name, <P/name>)
    in process_info.erl line 17
################################################################################
Interleaving #2
--------------------------------------------------------------------------------
Errors found:
* Blocked at a 'receive' ("deadlocked"; other processes have exited):
    <P/name> in process_info.erl line 18
     Mailbox contents: []
--------------------------------------------------------------------------------
Event trace:
   1: <P/name>: <P.1> = erlang:spawn(erlang, apply, [#Fun<process_info.0.62237898>,[]])
    in erlang.erl line 2687
   2: <P/name>: <P.2> = erlang:spawn(erlang, apply, [#Fun<process_info.1.62237898>,[]])
    in erlang.erl line 2687
   3: <P.1>: undefined = erlang:whereis(name)
    in process_info.erl line 11
   4: <P.1>: true = erlang:link(<P/name>)
    in process_info.erl line 11
   5: <P.1>: exits normally
   6: <P.1>: true = erlang:exit(<P/name>, normal)
    (while exiting)
   7: <P.2>: foo = <P/name> ! foo
    in process_info.erl line 12
   8: <P/name>: receives message (foo)
    in process_info.erl line 15
   9: <P/name>: {links,[<P.1>]} = erlang:process_info(<P/name>, links)
    in process_info.erl line 16
  10: <P/name>: true = erlang:register(name, <P/name>)
    in process_info.erl line 17
  11: <P.2>: true = erlang:link(<P/name>)
    in process_info.erl line 12
  12: <P.2>: exits normally
  13: <P.2>: true = erlang:exit(<P/name>, normal)
    (while exiting)
################################################################################
Interleaving #3
--------------------------------------------------------------------------------
Errors found:
* Blocked at a 'receive' ("deadlocked"; other processes have exited):
    <P/name> in process_info.erl line 18
     Mailbox contents: []
--------------------------------------------------------------------------------
Event trace:
   1: <P/name>: <P.1> = erlang:spawn(erlang, apply, [#Fun<process_info.0.62237898>,[]])
    in erlang.erl line 2687
   2: <P/name>: <P.2> = erlang:spawn(erlang, apply, [#Fun<process_info.1.62237898>,[]])
    in erlang.erl line 2687
   3: <P.1>: undefined = erlang:whereis(name)
    in process_info.erl line 11
   4: <P.2>: foo = <P/name> ! foo
    in process_info.erl line 12
   5: <P.2>: true = erlang:link(<P/name>)
    in process_info.erl line 12
   6: <P.2>: exits normally
   7: <P.2>: true = erlang:exit(<P/name>, normal)
    (while exiting)
   8: <P/name>: receives message (foo)
    in process_info.erl line 15
   9: <P/name>: {links,[<P.2>]} = erlang:process_info(<P/name>, links)
    in process_info.erl line 16
  10: <P/name>: true = erlang:register(name, <P/name>)
    in process_info.erl line 17
  11: <P.1>: true = erlang:link(<P/name>)
    in process_info.erl line 11
  12: <P.1>: exits normally
  13: <P.1>: true = erlang:exit(<P/name>, normal)
    (while exiting)
################################################################################
Interleaving #4
--------------------------------------------------------------------------------
Errors found:
* Blocked at a 'receive' ("deadlocked"; other processes have exited):
    <P/name> in process_info.erl line 18
     Mailbox contents: []
--------------------------------------------------------------------------------
Event trace:
   1: <P/name>: <P.1> = erlang:spawn(erlang, apply, [#Fun<process_info.0.62237898>,[]])
    in erlang.erl line 2687
   2: <P/name>: <P.2> = erlang:spawn(erlang, apply, [#Fun<process_info.1.62237898>,[]])
    in erlang.erl line 2687
   3: <P.1>: undefined = erlang:whereis(name)
    in process_info.erl line 11
   4: <P.2>: foo = <P/name> ! foo
    in process_info.erl line 12
   5: <P/name>: receives message (foo)
    in process_info.erl line 15
   6: <P/name>: {links,[]} = erlang:process_info(<P/name>, links)
    in process_info.erl line 16
   7: <P/name>: true = erlang:register(name, <P/name>)
    in process_info.erl line 17
   8: <P.1>: true = erlang:link(<P/name>)
    in process_info.erl line 11
   9: <P.1>: exits normally
  10: <P.1>: true = erlang:exit(<P/name>, normal)
    (while exiting)
  11: <P.2>: true = erlang:link(<P/name>)
    in process_info.erl line 12
  12: <P.2>: exits normally
  13: <P.2>: true = erlang:exit(<P/name>, normal)
    (while exiting)
################################################################################
Interleaving #5
--------------------------------------------------------------------------------
Errors found:
* Blocked at a 'receive' ("deadlocked"; other processes have exited):
    <P/name> in process_info.erl line 18
     Mailbox contents: []
--------------------------------------------------------------------------------
Event trace:
   1: <P/name>: <P.1> = erlang:spawn(erlang, apply, [#Fun<process_info.0.62237898>,[]])
    in erlang.erl line 2687
   2: <P/name>: <P.2> = erlang:spawn(erlang, apply, [#Fun<process_info.1.62237898>,[]])
    in erlang.erl line 2687
   3: <P.2>: foo = <P/name> ! foo
    in process_info.erl line 12
   4: <P.2>: true = erlang:link(<P/name>)
    in process_info.erl line 12
   5: <P.2>: exits normally
   6: <P.2>: true = erlang:exit(<P/name>, normal)
    (while exiting)
   7: <P/name>: receives message (foo)
    in process_info.erl line 15
   8: <P/name>: {links,[<P.2>]} = erlang:process_info(<P/name>, links)
    in process_info.erl line 16
   9: <P/name>: true = erlang:register(name, <P/name>)
    in process_info.erl line 17
  10: <P.1>: <P/name> = erlang:whereis(name)
    in process_info.erl line 11
  11: <P.1>: true = erlang:link(<P/name>)
    in process_info.erl line 11
  12: <P.1>: exits normally
  13: <P.1>: true = erlang:exit(<P/name>, normal)
    (while exiting)
################################################################################
Interleaving #6
--------------------------------------------------------------------------------
Errors found:
* Blocked at a 'receive' ("deadlocked"; other processes have exited):
    <P/name> in process_info.erl line 18
     Mailbox contents: []
--------------------------------------------------------------------------------
Event trace:
   1: <P/name>: <P.1> = erlang:spawn(erlang, apply, [#Fun<process_info.0.62237898>,[]])
    in erlang.erl line 2687
   2: <P/name>: <P.2> = erlang:spawn(erlang, apply, [#Fun<process_info.1.62237898>,[]])
    in erlang.erl line 2687
   3: <P.2>: foo = <P/name> ! foo
    in process_info.erl line 12
   4: <P/name>: receives message (foo)
    in process_info.erl line 15
   5: <P/name>: {links,[]} = erlang:process_info(<P/name>, links)
    in process_info.erl line 16
   6: <P.2>: true = erlang:link(<P/name>)
    in process_info.erl line 12
   7: <P.2>: exits normally
   8: <P.2>: true = erlang:exit(<P/name>, normal)
    (while exiting)
   9: <P/name>: true = erlang:register(name, <P/name>)
    in process_info.erl line 17
  10: <P.1>: <P/name> = erlang:whereis(name)
    in process_info.erl line 11
  11: <P.1>: true = erlang:link(<P/name>)
    in process_info.erl line 11
  12: <P.1>: exits normally
  13: <P.1>: true = erlang:exit(<P/name>, normal)
    (while exiting)
################################################################################
Exploration completed!
################################################################################
Tips:
--------------------------------------------------------------------------------
* Check `--help attributes' for info on how to pass options via module attributes.
* Running without a scheduling_bound corresponds to verification and may take a long time.
* Increase '--print_depth' if output/graph contains "...".

################################################################################
Info:
--------------------------------------------------------------------------------
* Writing results in /Users/stavros.aronis/git/Concuerror/tests/results/dpor_tests/results/process_info-links-inf-optimal.txt
* Automatically instrumented module io_lib
* Showing PIDs as "<symbolic name(/last registered name)>" ('-h symbolic_names').
* Instrumented & loaded module process_info
* Automatically instrumented module erlang
* Continuing after error (-k)
* You can see pairs of racing instructions (in the report and '--graph') with '--show_races true'

################################################################################
Done at 17 Jul 2018 21:16:41 (Exit status: error)
  Summary: 6 errors, 6/6 interleavings explored
